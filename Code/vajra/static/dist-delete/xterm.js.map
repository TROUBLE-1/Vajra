{"version":3,"file":"xterm.js","sources":["../src/xterm.js","../src/utils/Generic.ts","../src/utils/CircularList.ts","../src/utils/CharMeasure.ts","../src/utils/Browser.ts","../src/handlers/Clipboard.ts","../src/Viewport.ts","../src/Renderer.ts","../src/Parser.ts","../src/Linkifier.ts","../src/InputHandler.ts","../src/EventEmitter.ts","../src/EscapeSequences.ts","../src/CompositionHelper.ts","../src/Charsets.ts","../node_modules/browser-pack/_prelude.js"],"sourcesContent":["/**\n * xterm.js: xterm, in the browser\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n * @license MIT\n */\n\nimport { CompositionHelper } from './CompositionHelper';\nimport { EventEmitter } from './EventEmitter';\nimport { Viewport } from './Viewport';\nimport { rightClickHandler, pasteHandler, copyHandler } from './handlers/Clipboard';\nimport { CircularList } from './utils/CircularList';\nimport { C0 } from './EscapeSequences';\nimport { InputHandler } from './InputHandler';\nimport { Parser } from './Parser';\nimport { Renderer } from './Renderer';\nimport { Linkifier } from './Linkifier';\nimport { CharMeasure } from './utils/CharMeasure';\nimport * as Browser from './utils/Browser';\nimport * as Keyboard from './utils/Keyboard';\nimport { CHARSETS } from './Charsets';\n\n/**\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\n// Let it work inside Node.js for automated testing purposes.\nvar document = (typeof window != 'undefined') ? window.document : null;\n\n/**\n * The amount of write requests to queue before sending an XOFF signal to the\n * pty process. This number must be small in order for ^C and similar sequences\n * to be responsive.\n */\nvar WRITE_BUFFER_PAUSE_THRESHOLD = 5;\n\n/**\n * The number of writes to perform in a single batch before allowing the\n * renderer to catch up with a 0ms setTimeout.\n */\nvar WRITE_BATCH_SIZE = 300;\n\n/**\n * The time between cursor blinks. This is driven by JS rather than a CSS\n * animation due to a bug in Chromium that causes it to use excessive CPU time.\n * See https://github.com/Microsoft/vscode/issues/22900\n */\nvar CURSOR_BLINK_INTERVAL = 600;\n\n/**\n * Terminal\n */\n\n/**\n * Creates a new `Terminal` object.\n *\n * @param {object} options An object containing a set of options, the available options are:\n *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\n *   - `cols` (number): The number of columns of the terminal (horizontal size)\n *   - `rows` (number): The number of rows of the terminal (vertical size)\n *\n * @public\n * @class Xterm Xterm\n * @alias module:xterm/src/xterm\n */\nfunction Terminal(options) {\n  var self = this;\n\n  if (!(this instanceof Terminal)) {\n    return new Terminal(arguments[0], arguments[1], arguments[2]);\n  }\n\n  self.browser = Browser;\n  self.cancel = Terminal.cancel;\n\n  EventEmitter.call(this);\n\n  if (typeof options === 'number') {\n    options = {\n      cols: arguments[0],\n      rows: arguments[1],\n      handler: arguments[2]\n    };\n  }\n\n  options = options || {};\n\n\n  Object.keys(Terminal.defaults).forEach(function(key) {\n    if (options[key] == null) {\n      options[key] = Terminal.options[key];\n\n      if (Terminal[key] !== Terminal.defaults[key]) {\n        options[key] = Terminal[key];\n      }\n    }\n    self[key] = options[key];\n  });\n\n  if (options.colors.length === 8) {\n    options.colors = options.colors.concat(Terminal._colors.slice(8));\n  } else if (options.colors.length === 16) {\n    options.colors = options.colors.concat(Terminal._colors.slice(16));\n  } else if (options.colors.length === 10) {\n    options.colors = options.colors.slice(0, -2).concat(\n      Terminal._colors.slice(8, -2), options.colors.slice(-2));\n  } else if (options.colors.length === 18) {\n    options.colors = options.colors.concat(\n      Terminal._colors.slice(16, -2), options.colors.slice(-2));\n  }\n  this.colors = options.colors;\n\n  this.options = options;\n\n  // this.context = options.context || window;\n  // this.document = options.document || document;\n  this.parent = options.body || options.parent || (\n    document ? document.getElementsByTagName('body')[0] : null\n  );\n\n  this.cols = options.cols || options.geometry[0];\n  this.rows = options.rows || options.geometry[1];\n  this.geometry = [this.cols, this.rows];\n\n  if (options.handler) {\n    this.on('data', options.handler);\n  }\n\n  /**\n   * The scroll position of the y cursor, ie. ybase + y = the y position within the entire\n   * buffer\n   */\n  this.ybase = 0;\n\n  /**\n   * The scroll position of the viewport\n   */\n  this.ydisp = 0;\n\n  /**\n   * The cursor's x position after ybase\n   */\n  this.x = 0;\n\n  /**\n   * The cursor's y position after ybase\n   */\n  this.y = 0;\n\n  this.cursorState = 0;\n  this.cursorHidden = false;\n  this.convertEol;\n  this.queue = '';\n  this.scrollTop = 0;\n  this.scrollBottom = this.rows - 1;\n  this.customKeydownHandler = null;\n  this.cursorBlinkInterval = null;\n\n  // modes\n  this.applicationKeypad = false;\n  this.applicationCursor = false;\n  this.originMode = false;\n  this.insertMode = false;\n  this.wraparoundMode = true; // defaults: xterm - true, vt100 - false\n  this.normal = null;\n\n  // charset\n  this.charset = null;\n  this.gcharset = null;\n  this.glevel = 0;\n  this.charsets = [null];\n\n  // mouse properties\n  this.decLocator;\n  this.x10Mouse;\n  this.vt200Mouse;\n  this.vt300Mouse;\n  this.normalMouse;\n  this.mouseEvents;\n  this.sendFocus;\n  this.utfMouse;\n  this.sgrMouse;\n  this.urxvtMouse;\n\n  // misc\n  this.element;\n  this.children;\n  this.refreshStart;\n  this.refreshEnd;\n  this.savedX;\n  this.savedY;\n  this.savedCols;\n\n  // stream\n  this.readable = true;\n  this.writable = true;\n\n  this.defAttr = (0 << 18) | (257 << 9) | (256 << 0);\n  this.curAttr = this.defAttr;\n\n  this.params = [];\n  this.currentParam = 0;\n  this.prefix = '';\n  this.postfix = '';\n\n  this.inputHandler = new InputHandler(this);\n  this.parser = new Parser(this.inputHandler, this);\n  // Reuse renderer if the Terminal is being recreated via a Terminal.reset call.\n  this.renderer = this.renderer || null;\n  this.linkifier = this.linkifier || new Linkifier();\n\n  // user input states\n  this.writeBuffer = [];\n  this.writeInProgress = false;\n\n  /**\n   * Whether _xterm.js_ sent XOFF in order to catch up with the pty process.\n   * This is a distinct state from writeStopped so that if the user requested\n   * XOFF via ^S that it will not automatically resume when the writeBuffer goes\n   * below threshold.\n   */\n  this.xoffSentToCatchUp = false;\n\n  /** Whether writing has been stopped as a result of XOFF */\n  this.writeStopped = false;\n\n  // leftover surrogate high from previous write invocation\n  this.surrogate_high = '';\n\n  /**\n   * An array of all lines in the entire buffer, including the prompt. The lines are array of\n   * characters which are 2-length arrays where [0] is an attribute and [1] is the character.\n   */\n  this.lines = new CircularList(this.scrollback);\n  var i = this.rows;\n  while (i--) {\n    this.lines.push(this.blankLine());\n  }\n\n  this.tabs;\n  this.setupStops();\n\n  // Store if user went browsing history in scrollback\n  this.userScrolling = false;\n}\n\ninherits(Terminal, EventEmitter);\n\n/**\n * back_color_erase feature for xterm.\n */\nTerminal.prototype.eraseAttr = function() {\n  // if (this.is('screen')) return this.defAttr;\n  return (this.defAttr & ~0x1ff) | (this.curAttr & 0x1ff);\n};\n\n/**\n * Colors\n */\n\n// Colors 0-15\nTerminal.tangoColors = [\n  // dark:\n  '#2e3436',\n  '#cc0000',\n  '#4e9a06',\n  '#c4a000',\n  '#3465a4',\n  '#75507b',\n  '#06989a',\n  '#d3d7cf',\n  // bright:\n  '#555753',\n  '#ef2929',\n  '#8ae234',\n  '#fce94f',\n  '#729fcf',\n  '#ad7fa8',\n  '#34e2e2',\n  '#eeeeec'\n];\n\n// Colors 0-15 + 16-255\n// Much thanks to TooTallNate for writing this.\nTerminal.colors = (function() {\n  var colors = Terminal.tangoColors.slice()\n  , r = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff]\n  , i;\n\n  // 16-231\n  i = 0;\n  for (; i < 216; i++) {\n    out(r[(i / 36) % 6 | 0], r[(i / 6) % 6 | 0], r[i % 6]);\n  }\n\n  // 232-255 (grey)\n  i = 0;\n  for (; i < 24; i++) {\n    r = 8 + i * 10;\n    out(r, r, r);\n  }\n\n  function out(r, g, b) {\n    colors.push('#' + hex(r) + hex(g) + hex(b));\n  }\n\n  function hex(c) {\n    c = c.toString(16);\n    return c.length < 2 ? '0' + c : c;\n  }\n\n  return colors;\n})();\n\nTerminal._colors = Terminal.colors.slice();\n\nTerminal.vcolors = (function() {\n  var out = []\n  , colors = Terminal.colors\n  , i = 0\n  , color;\n\n  for (; i < 256; i++) {\n    color = parseInt(colors[i].substring(1), 16);\n    out.push([\n      (color >> 16) & 0xff,\n      (color >> 8) & 0xff,\n      color & 0xff\n    ]);\n  }\n\n  return out;\n})();\n\n/**\n * Options\n */\n\nTerminal.defaults = {\n  colors: Terminal.colors,\n  theme: 'default',\n  convertEol: false,\n  termName: 'xterm',\n  geometry: [80, 24],\n  cursorBlink: false,\n  cursorStyle: 'block',\n  visualBell: false,\n  popOnBell: false,\n  scrollback: 1000,\n  screenKeys: false,\n  debug: false,\n  cancelEvents: false,\n  disableStdin: false,\n  useFlowControl: false,\n  tabStopWidth: 8\n  // programFeatures: false,\n  // focusKeys: false,\n};\n\nTerminal.options = {};\n\nTerminal.focus = null;\n\neach(keys(Terminal.defaults), function(key) {\n  Terminal[key] = Terminal.defaults[key];\n  Terminal.options[key] = Terminal.defaults[key];\n});\n\n/**\n * Focus the terminal. Delegates focus handling to the terminal's DOM element.\n */\nTerminal.prototype.focus = function() {\n  return this.textarea.focus();\n};\n\n/**\n * Retrieves an option's value from the terminal.\n * @param {string} key The option key.\n */\nTerminal.prototype.getOption = function(key, value) {\n  if (!(key in Terminal.defaults)) {\n    throw new Error('No option with key \"' + key + '\"');\n  }\n\n  if (typeof this.options[key] !== 'undefined') {\n    return this.options[key];\n  }\n\n  return this[key];\n};\n\n/**\n * Sets an option on the terminal.\n * @param {string} key The option key.\n * @param {string} value The option value.\n */\nTerminal.prototype.setOption = function(key, value) {\n  if (!(key in Terminal.defaults)) {\n    throw new Error('No option with key \"' + key + '\"');\n  }\n  switch (key) {\n    case 'scrollback':\n      if (this.options[key] !== value) {\n        if (this.lines.length > value) {\n          const amountToTrim = this.lines.length - value;\n          const needsRefresh = (this.ydisp - amountToTrim < 0);\n          this.lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n          if (needsRefresh) {\n            this.refresh(0, this.rows - 1);\n          }\n        }\n        this.lines.maxLength = value;\n        this.viewport.syncScrollArea();\n      }\n      break;\n  }\n  this[key] = value;\n  this.options[key] = value;\n  switch (key) {\n    case 'cursorBlink': this.setCursorBlinking(value); break;\n    case 'cursorStyle':\n      // Style 'block' applies with no class\n      this.element.classList.toggle(`xterm-cursor-style-underline`, value === 'underline');\n      this.element.classList.toggle(`xterm-cursor-style-bar`, value === 'bar');\n      break;\n    case 'tabStopWidth': this.setupStops(); break;\n  }\n};\n\nTerminal.prototype.restartCursorBlinking = function () {\n  this.setCursorBlinking(this.options.cursorBlink);\n};\n\nTerminal.prototype.setCursorBlinking = function (enabled) {\n  this.element.classList.toggle('xterm-cursor-blink', enabled);\n  this.clearCursorBlinkingInterval();\n  if (enabled) {\n    var self = this;\n    this.cursorBlinkInterval = setInterval(function () {\n      self.element.classList.toggle('xterm-cursor-blink-on');\n    }, CURSOR_BLINK_INTERVAL);\n  }\n};\n\nTerminal.prototype.clearCursorBlinkingInterval = function () {\n  this.element.classList.remove('xterm-cursor-blink-on');\n  if (this.cursorBlinkInterval) {\n    clearInterval(this.cursorBlinkInterval);\n    this.cursorBlinkInterval = null;\n  }\n};\n\n/**\n * Binds the desired focus behavior on a given terminal object.\n *\n * @static\n */\nTerminal.bindFocus = function (term) {\n  on(term.textarea, 'focus', function (ev) {\n    if (term.sendFocus) {\n      term.send(C0.ESC + '[I');\n    }\n    term.element.classList.add('focus');\n    term.showCursor();\n    term.restartCursorBlinking.apply(term);\n    Terminal.focus = term;\n    term.emit('focus', {terminal: term});\n  });\n};\n\n/**\n * Blur the terminal. Delegates blur handling to the terminal's DOM element.\n */\nTerminal.prototype.blur = function() {\n  return this.textarea.blur();\n};\n\n/**\n * Binds the desired blur behavior on a given terminal object.\n *\n * @static\n */\nTerminal.bindBlur = function (term) {\n  on(term.textarea, 'blur', function (ev) {\n    term.refresh(term.y, term.y);\n    if (term.sendFocus) {\n      term.send(C0.ESC + '[O');\n    }\n    term.element.classList.remove('focus');\n    term.clearCursorBlinkingInterval.apply(term);\n    Terminal.focus = null;\n    term.emit('blur', {terminal: term});\n  });\n};\n\n/**\n * Initialize default behavior\n */\nTerminal.prototype.initGlobal = function() {\n  var term = this;\n\n  Terminal.bindKeys(this);\n  Terminal.bindFocus(this);\n  Terminal.bindBlur(this);\n\n  // Bind clipboard functionality\n  on(this.element, 'copy', function (ev) {\n    copyHandler.call(this, ev, term);\n  });\n  on(this.textarea, 'paste', function (ev) {\n    pasteHandler.call(this, ev, term);\n  });\n  on(this.element, 'paste', function (ev) {\n    pasteHandler.call(this, ev, term);\n  });\n\n  function rightClickHandlerWrapper (ev) {\n    rightClickHandler.call(this, ev, term);\n  }\n\n  if (term.browser.isFirefox) {\n    on(this.element, 'mousedown', function (ev) {\n      if (ev.button == 2) {\n        rightClickHandlerWrapper(ev);\n      }\n    });\n  } else {\n    on(this.element, 'contextmenu', rightClickHandlerWrapper);\n  }\n};\n\n/**\n * Apply key handling to the terminal\n */\nTerminal.bindKeys = function(term) {\n  on(term.element, 'keydown', function(ev) {\n    if (document.activeElement != this) {\n      return;\n    }\n    term.keyDown(ev);\n  }, true);\n\n  on(term.element, 'keypress', function(ev) {\n    if (document.activeElement != this) {\n      return;\n    }\n    term.keyPress(ev);\n  }, true);\n\n  on(term.element, 'keyup', function(ev) {\n    if (!wasMondifierKeyOnlyEvent(ev)) {\n      term.focus(term);\n    }\n  }, true);\n\n  on(term.textarea, 'keydown', function(ev) {\n    term.keyDown(ev);\n  }, true);\n\n  on(term.textarea, 'keypress', function(ev) {\n    term.keyPress(ev);\n    // Truncate the textarea's value, since it is not needed\n    this.value = '';\n  }, true);\n\n  on(term.textarea, 'compositionstart', term.compositionHelper.compositionstart.bind(term.compositionHelper));\n  on(term.textarea, 'compositionupdate', term.compositionHelper.compositionupdate.bind(term.compositionHelper));\n  on(term.textarea, 'compositionend', term.compositionHelper.compositionend.bind(term.compositionHelper));\n  term.on('refresh', term.compositionHelper.updateCompositionElements.bind(term.compositionHelper));\n  term.on('refresh', function (data) {\n    term.queueLinkification(data.start, data.end)\n  });\n};\n\n\n/**\n * Insert the given row to the terminal or produce a new one\n * if no row argument is passed. Return the inserted row.\n * @param {HTMLElement} row (optional) The row to append to the terminal.\n */\nTerminal.prototype.insertRow = function (row) {\n  if (typeof row != 'object') {\n    row = document.createElement('div');\n  }\n\n  this.rowContainer.appendChild(row);\n  this.children.push(row);\n\n  return row;\n};\n\n/**\n * Opens the terminal within an element.\n *\n * @param {HTMLElement} parent The element to create the terminal within.\n */\nTerminal.prototype.open = function(parent) {\n  var self=this, i=0, div;\n\n  this.parent = parent || this.parent;\n\n  if (!this.parent) {\n    throw new Error('Terminal requires a parent element.');\n  }\n\n  // Grab global elements\n  this.context = this.parent.ownerDocument.defaultView;\n  this.document = this.parent.ownerDocument;\n  this.body = this.document.getElementsByTagName('body')[0];\n\n  //Create main element container\n  this.element = this.document.createElement('div');\n  this.element.classList.add('terminal');\n  this.element.classList.add('xterm');\n  this.element.classList.add('xterm-theme-' + this.theme);\n  this.setCursorBlinking(this.options.cursorBlink);\n\n  this.element.style.height\n  this.element.setAttribute('tabindex', 0);\n\n  this.viewportElement = document.createElement('div');\n  this.viewportElement.classList.add('xterm-viewport');\n  this.element.appendChild(this.viewportElement);\n  this.viewportScrollArea = document.createElement('div');\n  this.viewportScrollArea.classList.add('xterm-scroll-area');\n  this.viewportElement.appendChild(this.viewportScrollArea);\n\n  // Create the container that will hold the lines of the terminal and then\n  // produce the lines the lines.\n  this.rowContainer = document.createElement('div');\n  this.rowContainer.classList.add('xterm-rows');\n  this.element.appendChild(this.rowContainer);\n  this.children = [];\n  this.linkifier.attachToDom(document, this.children);\n\n  // Create the container that will hold helpers like the textarea for\n  // capturing DOM Events. Then produce the helpers.\n  this.helperContainer = document.createElement('div');\n  this.helperContainer.classList.add('xterm-helpers');\n  // TODO: This should probably be inserted once it's filled to prevent an additional layout\n  this.element.appendChild(this.helperContainer);\n  this.textarea = document.createElement('textarea');\n  this.textarea.classList.add('xterm-helper-textarea');\n  this.textarea.setAttribute('autocorrect', 'off');\n  this.textarea.setAttribute('autocapitalize', 'off');\n  this.textarea.setAttribute('spellcheck', 'false');\n  this.textarea.tabIndex = 0;\n  this.textarea.addEventListener('focus', function() {\n    self.emit('focus', {terminal: self});\n  });\n  this.textarea.addEventListener('blur', function() {\n    self.emit('blur', {terminal: self});\n  });\n  this.helperContainer.appendChild(this.textarea);\n\n  this.compositionView = document.createElement('div');\n  this.compositionView.classList.add('composition-view');\n  this.compositionHelper = new CompositionHelper(this.textarea, this.compositionView, this);\n  this.helperContainer.appendChild(this.compositionView);\n\n  this.charSizeStyleElement = document.createElement('style');\n  this.helperContainer.appendChild(this.charSizeStyleElement);\n\n  for (; i < this.rows; i++) {\n    this.insertRow();\n  }\n  this.parent.appendChild(this.element);\n\n  this.charMeasure = new CharMeasure(document, this.helperContainer);\n  this.charMeasure.on('charsizechanged', function () {\n    self.updateCharSizeCSS();\n  });\n  this.charMeasure.measure();\n\n  this.viewport = new Viewport(this, this.viewportElement, this.viewportScrollArea, this.charMeasure);\n  this.renderer = new Renderer(this);\n\n  // Setup loop that draws to screen\n  this.refresh(0, this.rows - 1);\n\n  // Initialize global actions that\n  // need to be taken on the document.\n  this.initGlobal();\n\n  // Ensure there is a Terminal.focus.\n  this.focus();\n\n  on(this.element, 'click', function() {\n    var selection = document.getSelection(),\n        collapsed = selection.isCollapsed,\n        isRange = typeof collapsed == 'boolean' ? !collapsed : selection.type == 'Range';\n    if (!isRange) {\n      self.focus();\n    }\n  });\n\n  // Listen for mouse events and translate\n  // them into terminal mouse protocols.\n  this.bindMouse();\n\n  /**\n   * This event is emitted when terminal has completed opening.\n   *\n   * @event open\n   */\n  this.emit('open');\n};\n\n\n/**\n * Attempts to load an add-on using CommonJS or RequireJS (whichever is available).\n * @param {string} addon The name of the addon to load\n * @static\n */\nTerminal.loadAddon = function(addon, callback) {\n  if (typeof exports === 'object' && typeof module === 'object') {\n    // CommonJS\n    return require('./addons/' + addon + '/' + addon);\n  } else if (typeof define == 'function') {\n    // RequireJS\n    return require(['./addons/' + addon + '/' + addon], callback);\n  } else {\n    console.error('Cannot load a module without a CommonJS or RequireJS environment.');\n    return false;\n  }\n};\n\n/**\n * Updates the helper CSS class with any changes necessary after the terminal's\n * character width has been changed.\n */\nTerminal.prototype.updateCharSizeCSS = function() {\n  this.charSizeStyleElement.textContent = '.xterm-wide-char{width:' + (this.charMeasure.width * 2) + 'px;}';\n}\n\n/**\n * XTerm mouse events\n * http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#Mouse%20Tracking\n * To better understand these\n * the xterm code is very helpful:\n * Relevant files:\n *   button.c, charproc.c, misc.c\n * Relevant functions in xterm/button.c:\n *   BtnCode, EmitButtonCode, EditorButton, SendMousePosition\n */\nTerminal.prototype.bindMouse = function() {\n  var el = this.element, self = this, pressed = 32;\n\n  // mouseup, mousedown, wheel\n  // left click: ^[[M 3<^[[M#3<\n  // wheel up: ^[[M`3>\n  function sendButton(ev) {\n    var button\n    , pos;\n\n    // get the xterm-style button\n    button = getButton(ev);\n\n    // get mouse coordinates\n    pos = getCoords(ev);\n    if (!pos) return;\n\n    sendEvent(button, pos);\n\n    switch (ev.overrideType || ev.type) {\n      case 'mousedown':\n        pressed = button;\n        break;\n      case 'mouseup':\n        // keep it at the left\n        // button, just in case.\n        pressed = 32;\n        break;\n      case 'wheel':\n        // nothing. don't\n        // interfere with\n        // `pressed`.\n        break;\n    }\n  }\n\n  // motion example of a left click:\n  // ^[[M 3<^[[M@4<^[[M@5<^[[M@6<^[[M@7<^[[M#7<\n  function sendMove(ev) {\n    var button = pressed\n    , pos;\n\n    pos = getCoords(ev);\n    if (!pos) return;\n\n    // buttons marked as motions\n    // are incremented by 32\n    button += 32;\n\n    sendEvent(button, pos);\n  }\n\n  // encode button and\n  // position to characters\n  function encode(data, ch) {\n    if (!self.utfMouse) {\n      if (ch === 255) return data.push(0);\n      if (ch > 127) ch = 127;\n      data.push(ch);\n    } else {\n      if (ch === 2047) return data.push(0);\n      if (ch < 127) {\n        data.push(ch);\n      } else {\n        if (ch > 2047) ch = 2047;\n        data.push(0xC0 | (ch >> 6));\n        data.push(0x80 | (ch & 0x3F));\n      }\n    }\n  }\n\n  // send a mouse event:\n  // regular/utf8: ^[[M Cb Cx Cy\n  // urxvt: ^[[ Cb ; Cx ; Cy M\n  // sgr: ^[[ Cb ; Cx ; Cy M/m\n  // vt300: ^[[ 24(1/3/5)~ [ Cx , Cy ] \\r\n  // locator: CSI P e ; P b ; P r ; P c ; P p & w\n  function sendEvent(button, pos) {\n    // self.emit('mouse', {\n    //   x: pos.x - 32,\n    //   y: pos.x - 32,\n    //   button: button\n    // });\n\n    if (self.vt300Mouse) {\n      // NOTE: Unstable.\n      // http://www.vt100.net/docs/vt3xx-gp/chapter15.html\n      button &= 3;\n      pos.x -= 32;\n      pos.y -= 32;\n      var data = C0.ESC + '[24';\n      if (button === 0) data += '1';\n      else if (button === 1) data += '3';\n      else if (button === 2) data += '5';\n      else if (button === 3) return;\n      else data += '0';\n      data += '~[' + pos.x + ',' + pos.y + ']\\r';\n      self.send(data);\n      return;\n    }\n\n    if (self.decLocator) {\n      // NOTE: Unstable.\n      button &= 3;\n      pos.x -= 32;\n      pos.y -= 32;\n      if (button === 0) button = 2;\n      else if (button === 1) button = 4;\n      else if (button === 2) button = 6;\n      else if (button === 3) button = 3;\n      self.send(C0.ESC + '['\n                + button\n                + ';'\n                + (button === 3 ? 4 : 0)\n                + ';'\n                + pos.y\n                + ';'\n                + pos.x\n                + ';'\n                + (pos.page || 0)\n                + '&w');\n      return;\n    }\n\n    if (self.urxvtMouse) {\n      pos.x -= 32;\n      pos.y -= 32;\n      pos.x++;\n      pos.y++;\n      self.send(C0.ESC + '[' + button + ';' + pos.x + ';' + pos.y + 'M');\n      return;\n    }\n\n    if (self.sgrMouse) {\n      pos.x -= 32;\n      pos.y -= 32;\n      self.send(C0.ESC + '[<'\n                + (((button & 3) === 3 ? button & ~3 : button) - 32)\n                + ';'\n                + pos.x\n                + ';'\n                + pos.y\n                + ((button & 3) === 3 ? 'm' : 'M'));\n      return;\n    }\n\n    var data = [];\n\n    encode(data, button);\n    encode(data, pos.x);\n    encode(data, pos.y);\n\n    self.send(C0.ESC + '[M' + String.fromCharCode.apply(String, data));\n  }\n\n  function getButton(ev) {\n    var button\n    , shift\n    , meta\n    , ctrl\n    , mod;\n\n    // two low bits:\n    // 0 = left\n    // 1 = middle\n    // 2 = right\n    // 3 = release\n    // wheel up/down:\n    // 1, and 2 - with 64 added\n    switch (ev.overrideType || ev.type) {\n      case 'mousedown':\n        button = ev.button != null\n          ? +ev.button\n        : ev.which != null\n          ? ev.which - 1\n        : null;\n\n        if (self.browser.isMSIE) {\n          button = button === 1 ? 0 : button === 4 ? 1 : button;\n        }\n        break;\n      case 'mouseup':\n        button = 3;\n        break;\n      case 'DOMMouseScroll':\n        button = ev.detail < 0\n          ? 64\n        : 65;\n        break;\n      case 'wheel':\n        button = ev.wheelDeltaY > 0\n          ? 64\n        : 65;\n        break;\n    }\n\n    // next three bits are the modifiers:\n    // 4 = shift, 8 = meta, 16 = control\n    shift = ev.shiftKey ? 4 : 0;\n    meta = ev.metaKey ? 8 : 0;\n    ctrl = ev.ctrlKey ? 16 : 0;\n    mod = shift | meta | ctrl;\n\n    // no mods\n    if (self.vt200Mouse) {\n      // ctrl only\n      mod &= ctrl;\n    } else if (!self.normalMouse) {\n      mod = 0;\n    }\n\n    // increment to SP\n    button = (32 + (mod << 2)) + button;\n\n    return button;\n  }\n\n  // mouse coordinates measured in cols/rows\n  function getCoords(ev) {\n    var x, y, w, h, el;\n\n    // ignore browsers without pageX for now\n    if (ev.pageX == null) return;\n\n    x = ev.pageX;\n    y = ev.pageY;\n    el = self.element;\n\n    // should probably check offsetParent\n    // but this is more portable\n    while (el && el !== self.document.documentElement) {\n      x -= el.offsetLeft;\n      y -= el.offsetTop;\n      el = 'offsetParent' in el\n        ? el.offsetParent\n      : el.parentNode;\n    }\n\n    // convert to cols/rows\n    x = Math.ceil(x / self.charMeasure.width);\n    y = Math.ceil(y / self.charMeasure.height);\n\n    // be sure to avoid sending\n    // bad positions to the program\n    if (x < 0) x = 0;\n    if (x > self.cols) x = self.cols;\n    if (y < 0) y = 0;\n    if (y > self.rows) y = self.rows;\n\n    // xterm sends raw bytes and\n    // starts at 32 (SP) for each.\n    x += 32;\n    y += 32;\n\n    return {\n      x: x,\n      y: y,\n      type: 'wheel'\n    };\n  }\n\n  on(el, 'mousedown', function(ev) {\n    if (!self.mouseEvents) return;\n\n    // send the button\n    sendButton(ev);\n\n    // ensure focus\n    self.focus();\n\n    // fix for odd bug\n    //if (self.vt200Mouse && !self.normalMouse) {\n    if (self.vt200Mouse) {\n      ev.overrideType = 'mouseup';\n      sendButton(ev);\n      return self.cancel(ev);\n    }\n\n    // bind events\n    if (self.normalMouse) on(self.document, 'mousemove', sendMove);\n\n    // x10 compatibility mode can't send button releases\n    if (!self.x10Mouse) {\n      on(self.document, 'mouseup', function up(ev) {\n        sendButton(ev);\n        if (self.normalMouse) off(self.document, 'mousemove', sendMove);\n        off(self.document, 'mouseup', up);\n        return self.cancel(ev);\n      });\n    }\n\n    return self.cancel(ev);\n  });\n\n  //if (self.normalMouse) {\n  //  on(self.document, 'mousemove', sendMove);\n  //}\n\n  on(el, 'wheel', function(ev) {\n    if (!self.mouseEvents) return;\n    if (self.x10Mouse\n        || self.vt300Mouse\n        || self.decLocator) return;\n    sendButton(ev);\n    return self.cancel(ev);\n  });\n\n  // allow wheel scrolling in\n  // the shell for example\n  on(el, 'wheel', function(ev) {\n    if (self.mouseEvents) return;\n    self.viewport.onWheel(ev);\n    return self.cancel(ev);\n  });\n};\n\n/**\n * Destroys the terminal.\n */\nTerminal.prototype.destroy = function() {\n  this.readable = false;\n  this.writable = false;\n  this._events = {};\n  this.handler = function() {};\n  this.write = function() {};\n  if (this.element && this.element.parentNode) {\n    this.element.parentNode.removeChild(this.element);\n  }\n  //this.emit('close');\n};\n\n/**\n * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\n * opportunity.\n * @param {number} start The row to start from (between 0 and this.rows - 1).\n * @param {number} end The row to end at (between start and this.rows - 1).\n */\nTerminal.prototype.refresh = function(start, end) {\n  if (this.renderer) {\n    this.renderer.queueRefresh(start, end);\n  }\n};\n\n/**\n * Queues linkification for the specified rows.\n * @param {number} start The row to start from (between 0 and this.rows - 1).\n * @param {number} end The row to end at (between start and this.rows - 1).\n */\nTerminal.prototype.queueLinkification = function(start, end) {\n  if (this.linkifier) {\n    for (let i = start; i <= end; i++) {\n      this.linkifier.linkifyRow(i);\n    }\n  }\n}\n\n/**\n * Display the cursor element\n */\nTerminal.prototype.showCursor = function() {\n  if (!this.cursorState) {\n    this.cursorState = 1;\n    this.refresh(this.y, this.y);\n  }\n};\n\n/**\n * Scroll the terminal down 1 row, creating a blank line.\n */\nTerminal.prototype.scroll = function() {\n  var row;\n\n  // Make room for the new row in lines\n  if (this.lines.length === this.lines.maxLength) {\n    this.lines.trimStart(1);\n    this.ybase--;\n    if (this.ydisp !== 0) {\n      this.ydisp--;\n    }\n  }\n\n  this.ybase++;\n\n  // TODO: Why is this done twice?\n  if (!this.userScrolling) {\n    this.ydisp = this.ybase;\n  }\n\n  // last line\n  row = this.ybase + this.rows - 1;\n\n  // subtract the bottom scroll region\n  row -= this.rows - 1 - this.scrollBottom;\n\n  if (row === this.lines.length) {\n    // Optimization: pushing is faster than splicing when they amount to the same behavior\n    this.lines.push(this.blankLine());\n  } else {\n    // add our new line\n    this.lines.splice(row, 0, this.blankLine());\n  }\n\n  if (this.scrollTop !== 0) {\n    if (this.ybase !== 0) {\n      this.ybase--;\n      if (!this.userScrolling) {\n        this.ydisp = this.ybase;\n      }\n    }\n    this.lines.splice(this.ybase + this.scrollTop, 1);\n  }\n\n  // this.maxRange();\n  this.updateRange(this.scrollTop);\n  this.updateRange(this.scrollBottom);\n\n  /**\n   * This event is emitted whenever the terminal is scrolled.\n   * The one parameter passed is the new y display position.\n   *\n   * @event scroll\n   */\n  this.emit('scroll', this.ydisp);\n};\n\n/**\n * Scroll the display of the terminal\n * @param {number} disp The number of lines to scroll down (negatives scroll up).\n * @param {boolean} suppressScrollEvent Don't emit the scroll event as scrollDisp. This is used\n * to avoid unwanted events being handled by the veiwport when the event was triggered from the\n * viewport originally.\n */\nTerminal.prototype.scrollDisp = function(disp, suppressScrollEvent) {\n  if (disp < 0) {\n    this.userScrolling = true;\n  } else if (disp + this.ydisp >= this.ybase) {\n    this.userScrolling = false;\n  }\n\n  this.ydisp += disp;\n\n  if (this.ydisp > this.ybase) {\n    this.ydisp = this.ybase;\n  } else if (this.ydisp < 0) {\n    this.ydisp = 0;\n  }\n\n  if (!suppressScrollEvent) {\n    this.emit('scroll', this.ydisp);\n  }\n\n  this.refresh(0, this.rows - 1);\n};\n\n/**\n * Scroll the display of the terminal by a number of pages.\n * @param {number} pageCount The number of pages to scroll (negative scrolls up).\n */\nTerminal.prototype.scrollPages = function(pageCount) {\n  this.scrollDisp(pageCount * (this.rows - 1));\n}\n\n/**\n * Scrolls the display of the terminal to the top.\n */\nTerminal.prototype.scrollToTop = function() {\n  this.scrollDisp(-this.ydisp);\n}\n\n/**\n * Scrolls the display of the terminal to the bottom.\n */\nTerminal.prototype.scrollToBottom = function() {\n  this.scrollDisp(this.ybase - this.ydisp);\n}\n\n/**\n * Writes text to the terminal.\n * @param {string} text The text to write to the terminal.\n */\nTerminal.prototype.write = function(data) {\n  this.writeBuffer.push(data);\n\n  // Send XOFF to pause the pty process if the write buffer becomes too large so\n  // xterm.js can catch up before more data is sent. This is necessary in order\n  // to keep signals such as ^C responsive.\n  if (this.options.useFlowControl && !this.xoffSentToCatchUp && this.writeBuffer.length >= WRITE_BUFFER_PAUSE_THRESHOLD) {\n    // XOFF - stop pty pipe\n    // XON will be triggered by emulator before processing data chunk\n    this.send(C0.DC3);\n    this.xoffSentToCatchUp = true;\n  }\n\n  if (!this.writeInProgress && this.writeBuffer.length > 0) {\n    // Kick off a write which will write all data in sequence recursively\n    this.writeInProgress = true;\n    // Kick off an async innerWrite so more writes can come in while processing data\n    var self = this;\n    setTimeout(function () {\n      self.innerWrite();\n    });\n  }\n}\n\nTerminal.prototype.innerWrite = function() {\n  var writeBatch = this.writeBuffer.splice(0, WRITE_BATCH_SIZE);\n  while (writeBatch.length > 0) {\n    var data = writeBatch.shift();\n    var l = data.length, i = 0, j, cs, ch, code, low, ch_width, row;\n\n    // If XOFF was sent in order to catch up with the pty process, resume it if\n    // the writeBuffer is empty to allow more data to come in.\n    if (this.xoffSentToCatchUp && writeBatch.length === 0 && this.writeBuffer.length === 0) {\n      this.send(C0.DC1);\n      this.xoffSentToCatchUp = false;\n    }\n\n    this.refreshStart = this.y;\n    this.refreshEnd = this.y;\n\n    this.parser.parse(data);\n\n    this.updateRange(this.y);\n    this.refresh(this.refreshStart, this.refreshEnd);\n  }\n  if (this.writeBuffer.length > 0) {\n    // Allow renderer to catch up before processing the next batch\n    var self = this;\n    setTimeout(function () {\n      self.innerWrite();\n    }, 0);\n  } else {\n    this.writeInProgress = false;\n  }\n};\n\n/**\n * Writes text to the terminal, followed by a break line character (\\n).\n * @param {string} text The text to write to the terminal.\n */\nTerminal.prototype.writeln = function(data) {\n  this.write(data + '\\r\\n');\n};\n\n/**\n * Attaches a custom keydown handler which is run before keys are processed, giving consumers of\n * xterm.js ultimate control as to what keys should be processed by the terminal and what keys\n * should not.\n * @param {function} customKeydownHandler The custom KeyboardEvent handler to attach. This is a\n *   function that takes a KeyboardEvent, allowing consumers to stop propogation and/or prevent\n *   the default action. The function returns whether the event should be processed by xterm.js.\n */\nTerminal.prototype.attachCustomKeydownHandler = function(customKeydownHandler) {\n  this.customKeydownHandler = customKeydownHandler;\n}\n\n/**\n * Attaches a http(s) link handler, forcing web links to behave differently to\n * regular <a> tags. This will trigger a refresh as links potentially need to be\n * reconstructed. Calling this with null will remove the handler.\n * @param {LinkHandler} handler The handler callback function.\n */\nTerminal.prototype.setHypertextLinkHandler = function(handler) {\n  if (!this.linkifier) {\n    throw new Error('Cannot attach a hypertext link handler before Terminal.open is called');\n  }\n  this.linkifier.setHypertextLinkHandler(handler);\n  // Refresh to force links to refresh\n  this.refresh(0, this.rows - 1);\n}\n\n/**\n * Attaches a validation callback for hypertext links. This is useful to use\n * validation logic or to do something with the link's element and url.\n * @param {LinkMatcherValidationCallback} callback The callback to use, this can\n * be cleared with null.\n */\nTerminal.prototype.setHypertextValidationCallback = function(handler) {\n  if (!this.linkifier) {\n    throw new Error('Cannot attach a hypertext validation callback before Terminal.open is called');\n  }\n  this.linkifier.setHypertextValidationCallback(handler);\n  // Refresh to force links to refresh\n  this.refresh(0, this.rows - 1);\n}\n\n/**\n   * Registers a link matcher, allowing custom link patterns to be matched and\n   * handled.\n   * @param {RegExp} regex The regular expression to search for, specifically\n   * this searches the textContent of the rows. You will want to use \\s to match\n   * a space ' ' character for example.\n   * @param {LinkHandler} handler The callback when the link is called.\n   * @param {LinkMatcherOptions} [options] Options for the link matcher.\n   * @return {number} The ID of the new matcher, this can be used to deregister.\n */\nTerminal.prototype.registerLinkMatcher = function(regex, handler, options) {\n  if (this.linkifier) {\n    var matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\n    this.refresh(0, this.rows - 1);\n    return matcherId;\n  }\n}\n\n/**\n * Deregisters a link matcher if it has been registered.\n * @param {number} matcherId The link matcher's ID (returned after register)\n */\nTerminal.prototype.deregisterLinkMatcher = function(matcherId) {\n  if (this.linkifier) {\n    if (this.linkifier.deregisterLinkMatcher(matcherId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n}\n\n/**\n * Handle a keydown event\n * Key Resources:\n *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n * @param {KeyboardEvent} ev The keydown event to be handled.\n */\nTerminal.prototype.keyDown = function(ev) {\n  if (this.customKeydownHandler && this.customKeydownHandler(ev) === false) {\n    return false;\n  }\n\n  this.restartCursorBlinking();\n\n  if (!this.compositionHelper.keydown.bind(this.compositionHelper)(ev)) {\n    if (this.ybase !== this.ydisp) {\n      this.scrollToBottom();\n    }\n    return false;\n  }\n\n  var self = this;\n  var result = this.evaluateKeyEscapeSequence(ev);\n\n  if (result.key === C0.DC3) { // XOFF\n    this.writeStopped = true;\n  } else if (result.key === C0.DC1) { // XON\n    this.writeStopped = false;\n  }\n\n  if (result.scrollDisp) {\n    this.scrollDisp(result.scrollDisp);\n    return this.cancel(ev, true);\n  }\n\n  if (isThirdLevelShift(this, ev)) {\n    return true;\n  }\n\n  if (result.cancel) {\n    // The event is canceled at the end already, is this necessary?\n    this.cancel(ev, true);\n  }\n\n  if (!result.key) {\n    return true;\n  }\n\n  this.emit('keydown', ev);\n  this.emit('key', result.key, ev);\n  this.showCursor();\n  this.handler(result.key);\n\n  return this.cancel(ev, true);\n};\n\n/**\n * Returns an object that determines how a KeyboardEvent should be handled. The key of the\n * returned value is the new key code to pass to the PTY.\n *\n * Reference: http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n * @param {KeyboardEvent} ev The keyboard event to be translated to key escape sequence.\n */\nTerminal.prototype.evaluateKeyEscapeSequence = function(ev) {\n  var result = {\n    // Whether to cancel event propogation (NOTE: this may not be needed since the event is\n    // canceled at the end of keyDown\n    cancel: false,\n    // The new key even to emit\n    key: undefined,\n    // The number of characters to scroll, if this is defined it will cancel the event\n    scrollDisp: undefined\n  };\n  var modifiers = ev.shiftKey << 0 | ev.altKey << 1 | ev.ctrlKey << 2 | ev.metaKey << 3;\n  switch (ev.keyCode) {\n    case 8:\n      // backspace\n      if (ev.shiftKey) {\n        result.key = C0.BS; // ^H\n        break;\n      }\n      result.key = C0.DEL; // ^?\n      break;\n    case 9:\n      // tab\n      if (ev.shiftKey) {\n        result.key = C0.ESC + '[Z';\n        break;\n      }\n      result.key = C0.HT;\n      result.cancel = true;\n      break;\n    case 13:\n      // return/enter\n      result.key = C0.CR;\n      result.cancel = true;\n      break;\n    case 27:\n      // escape\n      result.key = C0.ESC;\n      result.cancel = true;\n      break;\n    case 37:\n      // left-arrow\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\n        // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key == C0.ESC + '[1;3D') {\n          result.key = (this.browser.isMac) ? C0.ESC + 'b' : C0.ESC + '[1;5D';\n        }\n      } else if (this.applicationCursor) {\n        result.key = C0.ESC + 'OD';\n      } else {\n        result.key = C0.ESC + '[D';\n      }\n      break;\n    case 39:\n      // right-arrow\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\n        // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key == C0.ESC + '[1;3C') {\n          result.key = (this.browser.isMac) ? C0.ESC + 'f' : C0.ESC + '[1;5C';\n        }\n      } else if (this.applicationCursor) {\n        result.key = C0.ESC + 'OC';\n      } else {\n        result.key = C0.ESC + '[C';\n      }\n      break;\n    case 38:\n      // up-arrow\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\n        // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\n        // http://unix.stackexchange.com/a/108106\n        if (result.key == C0.ESC + '[1;3A') {\n          result.key = C0.ESC + '[1;5A';\n        }\n      } else if (this.applicationCursor) {\n        result.key = C0.ESC + 'OA';\n      } else {\n        result.key = C0.ESC + '[A';\n      }\n      break;\n    case 40:\n      // down-arrow\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\n        // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\n        // http://unix.stackexchange.com/a/108106\n        if (result.key == C0.ESC + '[1;3B') {\n          result.key = C0.ESC + '[1;5B';\n        }\n      } else if (this.applicationCursor) {\n        result.key = C0.ESC + 'OB';\n      } else {\n        result.key = C0.ESC + '[B';\n      }\n      break;\n    case 45:\n      // insert\n      if (!ev.shiftKey && !ev.ctrlKey) {\n        // <Ctrl> or <Shift> + <Insert> are used to\n        // copy-paste on some systems.\n        result.key = C0.ESC + '[2~';\n      }\n      break;\n    case 46:\n      // delete\n      if (modifiers) {\n        result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[3~';\n      }\n      break;\n    case 36:\n      // home\n      if (modifiers)\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\n      else if (this.applicationCursor)\n        result.key = C0.ESC + 'OH';\n      else\n        result.key = C0.ESC + '[H';\n      break;\n    case 35:\n      // end\n      if (modifiers)\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\n      else if (this.applicationCursor)\n        result.key = C0.ESC + 'OF';\n      else\n        result.key = C0.ESC + '[F';\n      break;\n    case 33:\n      // page up\n      if (ev.shiftKey) {\n        result.scrollDisp = -(this.rows - 1);\n      } else {\n        result.key = C0.ESC + '[5~';\n      }\n      break;\n    case 34:\n      // page down\n      if (ev.shiftKey) {\n        result.scrollDisp = this.rows - 1;\n      } else {\n        result.key = C0.ESC + '[6~';\n      }\n      break;\n    case 112:\n      // F1-F12\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\n      } else {\n        result.key = C0.ESC + 'OP';\n      }\n      break;\n    case 113:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n      } else {\n        result.key = C0.ESC + 'OQ';\n      }\n      break;\n    case 114:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\n      } else {\n        result.key = C0.ESC + 'OR';\n      }\n      break;\n    case 115:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\n      } else {\n        result.key = C0.ESC + 'OS';\n      }\n      break;\n    case 116:\n      if (modifiers) {\n        result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[15~';\n      }\n      break;\n    case 117:\n      if (modifiers) {\n        result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[17~';\n      }\n      break;\n    case 118:\n      if (modifiers) {\n        result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[18~';\n      }\n      break;\n    case 119:\n      if (modifiers) {\n        result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[19~';\n      }\n      break;\n    case 120:\n      if (modifiers) {\n        result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[20~';\n      }\n      break;\n    case 121:\n      if (modifiers) {\n        result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[21~';\n      }\n      break;\n    case 122:\n      if (modifiers) {\n        result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[23~';\n      }\n      break;\n    case 123:\n      if (modifiers) {\n        result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[24~';\n      }\n      break;\n    default:\n      // a-z and space\n      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          result.key = String.fromCharCode(ev.keyCode - 64);\n        } else if (ev.keyCode === 32) {\n          // NUL\n          result.key = String.fromCharCode(0);\n        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n          // escape, file sep, group sep, record sep, unit sep\n          result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n        } else if (ev.keyCode === 56) {\n          // delete\n          result.key = String.fromCharCode(127);\n        } else if (ev.keyCode === 219) {\n          // ^[ - Control Sequence Introducer (CSI)\n          result.key = String.fromCharCode(27);\n        } else if (ev.keyCode === 220) {\n          // ^\\ - String Terminator (ST)\n          result.key = String.fromCharCode(28);\n        } else if (ev.keyCode === 221) {\n          // ^] - Operating System Command (OSC)\n          result.key = String.fromCharCode(29);\n        }\n      } else if (!this.browser.isMac && ev.altKey && !ev.ctrlKey && !ev.metaKey) {\n        // On Mac this is a third level shift. Use <Esc> instead.\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          result.key = C0.ESC + String.fromCharCode(ev.keyCode + 32);\n        } else if (ev.keyCode === 192) {\n          result.key = C0.ESC + '`';\n        } else if (ev.keyCode >= 48 && ev.keyCode <= 57) {\n          result.key = C0.ESC + (ev.keyCode - 48);\n        }\n      }\n      break;\n  }\n\n  return result;\n};\n\n/**\n * Set the G level of the terminal\n * @param g\n */\nTerminal.prototype.setgLevel = function(g) {\n  this.glevel = g;\n  this.charset = this.charsets[g];\n};\n\n/**\n * Set the charset for the given G level of the terminal\n * @param g\n * @param charset\n */\nTerminal.prototype.setgCharset = function(g, charset) {\n  this.charsets[g] = charset;\n  if (this.glevel === g) {\n    this.charset = charset;\n  }\n};\n\n/**\n * Handle a keypress event.\n * Key Resources:\n *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n * @param {KeyboardEvent} ev The keypress event to be handled.\n */\nTerminal.prototype.keyPress = function(ev) {\n  var key;\n\n  this.cancel(ev);\n\n  if (ev.charCode) {\n    key = ev.charCode;\n  } else if (ev.which == null) {\n    key = ev.keyCode;\n  } else if (ev.which !== 0 && ev.charCode !== 0) {\n    key = ev.which;\n  } else {\n    return false;\n  }\n\n  if (!key || (\n    (ev.altKey || ev.ctrlKey || ev.metaKey) && !isThirdLevelShift(this, ev)\n  )) {\n    return false;\n  }\n\n  key = String.fromCharCode(key);\n\n  this.emit('keypress', key, ev);\n  this.emit('key', key, ev);\n  this.showCursor();\n  this.handler(key);\n\n  return false;\n};\n\n/**\n * Send data for handling to the terminal\n * @param {string} data\n */\nTerminal.prototype.send = function(data) {\n  var self = this;\n\n  if (!this.queue) {\n    setTimeout(function() {\n      self.handler(self.queue);\n      self.queue = '';\n    }, 1);\n  }\n\n  this.queue += data;\n};\n\n/**\n * Ring the bell.\n * Note: We could do sweet things with webaudio here\n */\nTerminal.prototype.bell = function() {\n  if (!this.visualBell) return;\n  var self = this;\n  this.element.style.borderColor = 'white';\n  setTimeout(function() {\n    self.element.style.borderColor = '';\n  }, 10);\n  if (this.popOnBell) this.focus();\n};\n\n/**\n * Log the current state to the console.\n */\nTerminal.prototype.log = function() {\n  if (!this.debug) return;\n  if (!this.context.console || !this.context.console.log) return;\n  var args = Array.prototype.slice.call(arguments);\n  this.context.console.log.apply(this.context.console, args);\n};\n\n/**\n * Log the current state as error to the console.\n */\nTerminal.prototype.error = function() {\n  if (!this.debug) return;\n  if (!this.context.console || !this.context.console.error) return;\n  var args = Array.prototype.slice.call(arguments);\n  this.context.console.error.apply(this.context.console, args);\n};\n\n/**\n * Resizes the terminal.\n *\n * @param {number} x The number of columns to resize to.\n * @param {number} y The number of rows to resize to.\n */\nTerminal.prototype.resize = function(x, y) {\n  if (isNaN(x) || isNaN(y)) {\n    return;\n  }\n\n  var line\n  , el\n  , i\n  , j\n  , ch\n  , addToY;\n\n  if (x === this.cols && y === this.rows) {\n    return;\n  }\n\n  if (x < 1) x = 1;\n  if (y < 1) y = 1;\n\n  // resize cols\n  j = this.cols;\n  if (j < x) {\n    ch = [this.defAttr, ' ', 1]; // does xterm use the default attr?\n    i = this.lines.length;\n    while (i--) {\n      while (this.lines.get(i).length < x) {\n        this.lines.get(i).push(ch);\n      }\n    }\n  }\n\n  this.cols = x;\n  this.setupStops(this.cols);\n\n  // resize rows\n  j = this.rows;\n  addToY = 0;\n  if (j < y) {\n    el = this.element;\n    while (j++ < y) {\n      // y is rows, not this.y\n      if (this.lines.length < y + this.ybase) {\n        if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n          // There is room above the buffer and there are no empty elements below the line,\n          // scroll up\n          this.ybase--;\n          addToY++\n          if (this.ydisp > 0) {\n            // Viewport is at the top of the buffer, must increase downwards\n            this.ydisp--;\n          }\n        } else {\n          // Add a blank line if there is no buffer left at the top to scroll to, or if there\n          // are blank lines after the cursor\n          this.lines.push(this.blankLine());\n        }\n      }\n      if (this.children.length < y) {\n        this.insertRow();\n      }\n    }\n  } else { // (j > y)\n    while (j-- > y) {\n      if (this.lines.length > y + this.ybase) {\n        if (this.lines.length > this.ybase + this.y + 1) {\n          // The line is a blank line below the cursor, remove it\n          this.lines.pop();\n        } else {\n          // The line is the cursor, scroll down\n          this.ybase++;\n          this.ydisp++;\n        }\n      }\n      if (this.children.length > y) {\n        el = this.children.shift();\n        if (!el) continue;\n        el.parentNode.removeChild(el);\n      }\n    }\n  }\n  this.rows = y;\n\n  // Make sure that the cursor stays on screen\n  if (this.y >= y) {\n    this.y = y - 1;\n  }\n  if (addToY) {\n    this.y += addToY;\n  }\n\n  if (this.x >= x) {\n    this.x = x - 1;\n  }\n\n  this.scrollTop = 0;\n  this.scrollBottom = y - 1;\n\n  this.charMeasure.measure();\n\n  this.refresh(0, this.rows - 1);\n\n  this.normal = null;\n\n  this.geometry = [this.cols, this.rows];\n  this.emit('resize', {terminal: this, cols: x, rows: y});\n};\n\n/**\n * Updates the range of rows to refresh\n * @param {number} y The number of rows to refresh next.\n */\nTerminal.prototype.updateRange = function(y) {\n  if (y < this.refreshStart) this.refreshStart = y;\n  if (y > this.refreshEnd) this.refreshEnd = y;\n  // if (y > this.refreshEnd) {\n  //   this.refreshEnd = y;\n  //   if (y > this.rows - 1) {\n  //     this.refreshEnd = this.rows - 1;\n  //   }\n  // }\n};\n\n/**\n * Set the range of refreshing to the maximum value\n */\nTerminal.prototype.maxRange = function() {\n  this.refreshStart = 0;\n  this.refreshEnd = this.rows - 1;\n};\n\n\n\n/**\n * Setup the tab stops.\n * @param {number} i\n */\nTerminal.prototype.setupStops = function(i) {\n  if (i != null) {\n    if (!this.tabs[i]) {\n      i = this.prevStop(i);\n    }\n  } else {\n    this.tabs = {};\n    i = 0;\n  }\n\n  for (; i < this.cols; i += this.getOption('tabStopWidth')) {\n    this.tabs[i] = true;\n  }\n};\n\n\n/**\n * Move the cursor to the previous tab stop from the given position (default is current).\n * @param {number} x The position to move the cursor to the previous tab stop.\n */\nTerminal.prototype.prevStop = function(x) {\n  if (x == null) x = this.x;\n  while (!this.tabs[--x] && x > 0);\n  return x >= this.cols\n    ? this.cols - 1\n  : x < 0 ? 0 : x;\n};\n\n\n/**\n * Move the cursor one tab stop forward from the given position (default is current).\n * @param {number} x The position to move the cursor one tab stop forward.\n */\nTerminal.prototype.nextStop = function(x) {\n  if (x == null) x = this.x;\n  while (!this.tabs[++x] && x < this.cols);\n  return x >= this.cols\n    ? this.cols - 1\n  : x < 0 ? 0 : x;\n};\n\n\n/**\n * Erase in the identified line everything from \"x\" to the end of the line (right).\n * @param {number} x The column from which to start erasing to the end of the line.\n * @param {number} y The line in which to operate.\n */\nTerminal.prototype.eraseRight = function(x, y) {\n  var line = this.lines.get(this.ybase + y);\n  if (!line) {\n    return;\n  }\n  var ch = [this.eraseAttr(), ' ', 1]; // xterm\n  for (; x < this.cols; x++) {\n    line[x] = ch;\n  }\n  this.updateRange(y);\n};\n\n\n\n/**\n * Erase in the identified line everything from \"x\" to the start of the line (left).\n * @param {number} x The column from which to start erasing to the start of the line.\n * @param {number} y The line in which to operate.\n */\nTerminal.prototype.eraseLeft = function(x, y) {\n  var line = this.lines.get(this.ybase + y);\n  if (!line) {\n    return;\n  }\n  var ch = [this.eraseAttr(), ' ', 1]; // xterm\n  x++;\n  while (x--) {\n    line[x] = ch;\n  }\n  this.updateRange(y);\n};\n\n/**\n * Clears the entire buffer, making the prompt line the new first line.\n */\nTerminal.prototype.clear = function() {\n  if (this.ybase === 0 && this.y === 0) {\n    // Don't clear if it's already clear\n    return;\n  }\n  this.lines.set(0, this.lines.get(this.ybase + this.y));\n  this.lines.length = 1;\n  this.ydisp = 0;\n  this.ybase = 0;\n  this.y = 0;\n  for (var i = 1; i < this.rows; i++) {\n    this.lines.push(this.blankLine());\n  }\n  this.refresh(0, this.rows - 1);\n  this.emit('scroll', this.ydisp);\n};\n\n/**\n * Erase all content in the given line\n * @param {number} y The line to erase all of its contents.\n */\nTerminal.prototype.eraseLine = function(y) {\n  this.eraseRight(0, y);\n};\n\n\n/**\n * Return the data array of a blank line\n * @param {number} cur First bunch of data for each \"blank\" character.\n */\nTerminal.prototype.blankLine = function(cur) {\n  var attr = cur\n  ? this.eraseAttr()\n  : this.defAttr;\n\n  var ch = [attr, ' ', 1]  // width defaults to 1 halfwidth character\n  , line = []\n  , i = 0;\n\n  for (; i < this.cols; i++) {\n    line[i] = ch;\n  }\n\n  return line;\n};\n\n\n/**\n * If cur return the back color xterm feature attribute. Else return defAttr.\n * @param {object} cur\n */\nTerminal.prototype.ch = function(cur) {\n  return cur\n    ? [this.eraseAttr(), ' ', 1]\n  : [this.defAttr, ' ', 1];\n};\n\n\n/**\n * Evaluate if the current erminal is the given argument.\n * @param {object} term The terminal to evaluate\n */\nTerminal.prototype.is = function(term) {\n  var name = this.termName;\n  return (name + '').indexOf(term) === 0;\n};\n\n\n/**\n * Emit the 'data' event and populate the given data.\n * @param {string} data The data to populate in the event.\n */\nTerminal.prototype.handler = function(data) {\n  // Prevents all events to pty process if stdin is disabled\n  if (this.options.disableStdin) {\n    return;\n  }\n\n  // Input is being sent to the terminal, the terminal should focus the prompt.\n  if (this.ybase !== this.ydisp) {\n    this.scrollToBottom();\n  }\n  this.emit('data', data);\n};\n\n\n/**\n * Emit the 'title' event and populate the given title.\n * @param {string} title The title to populate in the event.\n */\nTerminal.prototype.handleTitle = function(title) {\n  /**\n   * This event is emitted when the title of the terminal is changed\n   * from inside the terminal. The parameter is the new title.\n   *\n   * @event title\n   */\n  this.emit('title', title);\n};\n\n\n/**\n * ESC\n */\n\n/**\n * ESC D Index (IND is 0x84).\n */\nTerminal.prototype.index = function() {\n  this.y++;\n  if (this.y > this.scrollBottom) {\n    this.y--;\n    this.scroll();\n  }\n  // If the end of the line is hit, prevent this action from wrapping around to the next line.\n  if (this.x >= this.cols) {\n    this.x--;\n  }\n};\n\n\n/**\n * ESC M Reverse Index (RI is 0x8d).\n *\n * Move the cursor up one row, inserting a new blank line if necessary.\n */\nTerminal.prototype.reverseIndex = function() {\n  var j;\n  if (this.y === this.scrollTop) {\n    // possibly move the code below to term.reverseScroll();\n    // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n    // blankLine(true) is xterm/linux behavior\n    this.lines.shiftElements(this.y + this.ybase, this.rows - 1, 1);\n    this.lines.set(this.y + this.ybase, this.blankLine(true));\n    this.updateRange(this.scrollTop);\n    this.updateRange(this.scrollBottom);\n  } else {\n    this.y--;\n  }\n};\n\n\n/**\n * ESC c Full Reset (RIS).\n */\nTerminal.prototype.reset = function() {\n  this.options.rows = this.rows;\n  this.options.cols = this.cols;\n  var customKeydownHandler = this.customKeydownHandler;\n  Terminal.call(this, this.options);\n  this.customKeydownHandler = customKeydownHandler;\n  this.refresh(0, this.rows - 1);\n  this.viewport.syncScrollArea();\n};\n\n\n/**\n * ESC H Tab Set (HTS is 0x88).\n */\nTerminal.prototype.tabSet = function() {\n  this.tabs[this.x] = true;\n};\n\n/**\n * Helpers\n */\n\nfunction on(el, type, handler, capture) {\n  if (!Array.isArray(el)) {\n    el = [el];\n  }\n  el.forEach(function (element) {\n    element.addEventListener(type, handler, capture || false);\n  });\n}\n\nfunction off(el, type, handler, capture) {\n  el.removeEventListener(type, handler, capture || false);\n}\n\nfunction cancel(ev, force) {\n  if (!this.cancelEvents && !force) {\n    return;\n  }\n  ev.preventDefault();\n  ev.stopPropagation();\n  return false;\n}\n\nfunction inherits(child, parent) {\n  function f() {\n    this.constructor = child;\n  }\n  f.prototype = parent.prototype;\n  child.prototype = new f;\n}\n\nfunction indexOf(obj, el) {\n  var i = obj.length;\n  while (i--) {\n    if (obj[i] === el) return i;\n  }\n  return -1;\n}\n\nfunction isThirdLevelShift(term, ev) {\n  var thirdLevelKey =\n      (term.browser.isMac && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n      (term.browser.isMSWindows && ev.altKey && ev.ctrlKey && !ev.metaKey);\n\n  if (ev.type == 'keypress') {\n    return thirdLevelKey;\n  }\n\n  // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\n  return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n}\n\n// Expose to InputHandler (temporary)\nTerminal.prototype.matchColor = matchColor;\n\nfunction matchColor(r1, g1, b1) {\n  var hash = (r1 << 16) | (g1 << 8) | b1;\n\n  if (matchColor._cache[hash] != null) {\n    return matchColor._cache[hash];\n  }\n\n  var ldiff = Infinity\n  , li = -1\n  , i = 0\n  , c\n  , r2\n  , g2\n  , b2\n  , diff;\n\n  for (; i < Terminal.vcolors.length; i++) {\n    c = Terminal.vcolors[i];\n    r2 = c[0];\n    g2 = c[1];\n    b2 = c[2];\n\n    diff = matchColor.distance(r1, g1, b1, r2, g2, b2);\n\n    if (diff === 0) {\n      li = i;\n      break;\n    }\n\n    if (diff < ldiff) {\n      ldiff = diff;\n      li = i;\n    }\n  }\n\n  return matchColor._cache[hash] = li;\n}\n\nmatchColor._cache = {};\n\n// http://stackoverflow.com/questions/1633828\nmatchColor.distance = function(r1, g1, b1, r2, g2, b2) {\n  return Math.pow(30 * (r1 - r2), 2)\n    + Math.pow(59 * (g1 - g2), 2)\n    + Math.pow(11 * (b1 - b2), 2);\n};\n\nfunction each(obj, iter, con) {\n  if (obj.forEach) return obj.forEach(iter, con);\n  for (var i = 0; i < obj.length; i++) {\n    iter.call(con, obj[i], i, obj);\n  }\n}\n\nfunction wasMondifierKeyOnlyEvent(ev) {\n  return ev.keyCode === 16 || // Shift\n    ev.keyCode === 17 || // Ctrl\n    ev.keyCode === 18; // Alt\n}\n\nfunction keys(obj) {\n  if (Object.keys) return Object.keys(obj);\n  var key, keys = [];\n  for (key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n  return keys;\n}\n\n/**\n * Expose\n */\n\nTerminal.EventEmitter = EventEmitter;\nTerminal.inherits = inherits;\n\n/**\n * Adds an event listener to the terminal.\n *\n * @param {string} event The name of the event. TODO: Document all event types\n * @param {function} callback The function to call when the event is triggered.\n */\nTerminal.on = on;\nTerminal.off = off;\nTerminal.cancel = cancel;\n\nmodule.exports = Terminal;\n","/**\n * Generic utilities module with methods that can be helpful at different parts of the code base.\n * @module xterm/utils/Generic\n * @license MIT\n */\n\n/**\n * Return if the given array contains the given element\n * @param {Array} array The array to search for the given element.\n * @param {Object} el The element to look for into the array\n */\nexport function contains(arr: any[], el: any) {\n  return arr.indexOf(el) >= 0;\n};\n","/**\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\n * overriding values at the start of the list.\n * @module xterm/utils/CircularList\n * @license MIT\n */\nexport class CircularList<T> {\n  private _array: T[];\n  private _startIndex: number;\n  private _length: number;\n\n  constructor(maxLength: number) {\n    this._array = new Array<T>(maxLength);\n    this._startIndex = 0;\n    this._length = 0;\n  }\n\n  public get maxLength(): number {\n    return this._array.length;\n  }\n\n  public set maxLength(newMaxLength: number) {\n    // Reconstruct array, starting at index 0. Only transfer values from the\n    // indexes 0 to length.\n    let newArray = new Array<T>(newMaxLength);\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\n      newArray[i] = this._array[this._getCyclicIndex(i)];\n    }\n    this._array = newArray;\n    this._startIndex = 0;\n  }\n\n  public get length(): number {\n    return this._length;\n  }\n\n  public set length(newLength: number) {\n    if (newLength > this._length) {\n      for (let i = this._length; i < newLength; i++) {\n        this._array[i] = undefined;\n      }\n    }\n    this._length = newLength;\n  }\n\n  public get forEach(): (callbackfn: (value: T, index: number, array: T[]) => void) => void {\n    return this._array.forEach;\n  }\n\n  /**\n   * Gets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index of the value to get.\n   * @return The value corresponding to the index.\n   */\n  public get(index: number): T {\n    return this._array[this._getCyclicIndex(index)];\n  }\n\n  /**\n   * Sets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index to set.\n   * @param value The value to set.\n   */\n  public set(index: number, value: T): void {\n    this._array[this._getCyclicIndex(index)] = value;\n  }\n\n  /**\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\n   * if the maximum length is reached.\n   * @param value The value to push onto the list.\n   */\n  public push(value: T): void {\n    this._array[this._getCyclicIndex(this._length)] = value;\n    if (this._length === this.maxLength) {\n      this._startIndex++;\n      if (this._startIndex === this.maxLength) {\n        this._startIndex = 0;\n      }\n    } else {\n      this._length++;\n    }\n  }\n\n  /**\n   * Removes and returns the last value on the list.\n   * @return The popped value.\n   */\n  public pop(): T {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  }\n\n  /**\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\n   * order to save creating a new array. Note that this operation may shift all values in the list\n   * in the worst case.\n   * @param start The index to delete and/or insert.\n   * @param deleteCount The number of elements to delete.\n   * @param items The items to insert.\n   */\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\n    if (deleteCount) {\n      for (let i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n      this._length -= deleteCount;\n    }\n    if (items && items.length) {\n      for (let i = this._length - 1; i >= start; i--) {\n        this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n      }\n      for (let i = 0; i < items.length; i++) {\n        this._array[this._getCyclicIndex(start + i)] = items[i];\n      }\n\n      if (this._length + items.length > this.maxLength) {\n        this._startIndex += (this._length + items.length) - this.maxLength;\n        this._length = this.maxLength;\n      } else {\n        this._length += items.length;\n      }\n    }\n  }\n\n  /**\n   * Trims a number of items from the start of the list.\n   * @param count The number of items to remove.\n   */\n  public trimStart(count: number): void {\n    if (count > this._length) {\n      count = this._length;\n    }\n    this._startIndex += count;\n    this._length -= count;\n  }\n\n  public shiftElements(start: number, count: number, offset: number): void {\n    if (count <= 0) {\n      return;\n    }\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (let i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n      const expandListBy = (start + count + offset) - this._length;\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n        while (this._length > this.maxLength) {\n          this._length--;\n          this._startIndex++;\n        }\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  }\n\n  /**\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\n   * backing array to get the element associated with the regular index.\n   * @param index The regular index.\n   * @returns The cyclic index.\n   */\n  private _getCyclicIndex(index: number): number {\n    return (this._startIndex + index) % this.maxLength;\n  }\n}\n","/**\n * @module xterm/utils/CharMeasure\n * @license MIT\n */\n\nimport { EventEmitter } from '../EventEmitter.js';\n\n/**\n * Utility class that measures the size of a character.\n */\nexport class CharMeasure extends EventEmitter {\n  private _document: Document;\n  private _parentElement: HTMLElement;\n  private _measureElement: HTMLElement;\n  private _width: number;\n  private _height: number;\n\n  constructor(document: Document, parentElement: HTMLElement) {\n    super();\n    this._document = document;\n    this._parentElement = parentElement;\n  }\n\n  public get width(): number {\n    return this._width;\n  }\n\n  public get height(): number {\n    return this._height;\n  }\n\n  public measure(): void {\n    if (!this._measureElement) {\n      this._measureElement = this._document.createElement('span');\n      this._measureElement.style.position = 'absolute';\n      this._measureElement.style.top = '0';\n      this._measureElement.style.left = '-9999em';\n      this._measureElement.textContent = 'W';\n      this._measureElement.setAttribute('aria-hidden', 'true');\n      this._parentElement.appendChild(this._measureElement);\n      // Perform _doMeasure async if the element was just attached as sometimes\n      // getBoundingClientRect does not return accurate values without this.\n      setTimeout(() => this._doMeasure(), 0);\n    } else {\n      this._doMeasure();\n    }\n  }\n\n  private _doMeasure(): void {\n    const geometry = this._measureElement.getBoundingClientRect();\n    // The element is likely currently display:none, we should retain the\n    // previous value.\n    if (geometry.width === 0 || geometry.height === 0) {\n      return;\n    }\n    if (this._width !== geometry.width || this._height !== geometry.height) {\n      this._width = geometry.width;\n      this._height = geometry.height;\n      this.emit('charsizechanged');\n    }\n  }\n}\n","/**\n * Attributes and methods to help with identifying the current browser and platform.\n * @module xterm/utils/Browser\n * @license MIT\n */\n\nimport { contains } from './Generic';\n\nconst isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = !!~userAgent.indexOf('Firefox');\nexport const isMSIE = !!~userAgent.indexOf('MSIE') || !!~userAgent.indexOf('Trident');\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = contains(['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'], platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isMSWindows = contains(['Windows', 'Win16', 'Win32', 'WinCE'], platform);\n","/**\n * Clipboard handler module: exports methods for handling all clipboard-related events in the\n * terminal.\n * @module xterm/handlers/Clipboard\n * @license MIT\n */\n\nimport { ITerminal } from '../Interfaces';\n\ninterface IWindow extends Window {\n  clipboardData?: {\n    getData(format: string): string;\n    setData(format: string, data: string);\n  };\n}\n\ndeclare var window: IWindow;\n\n/**\n * Prepares text copied from terminal selection, to be saved in the clipboard by:\n *   1. stripping all trailing white spaces\n *   2. converting all non-breaking spaces to regular spaces\n * @param {string} text The copied text that needs processing for storing in clipboard\n * @returns {string}\n */\nexport function prepareTextForClipboard(text: string): string {\n  let space = String.fromCharCode(32),\n      nonBreakingSpace = String.fromCharCode(160),\n      allNonBreakingSpaces = new RegExp(nonBreakingSpace, 'g'),\n      processedText = text.split('\\n').map(function (line) {\n        // Strip all trailing white spaces and convert all non-breaking spaces\n        // to regular spaces.\n        let processedLine = line.replace(/\\s+$/g, '').replace(allNonBreakingSpaces, space);\n\n        return processedLine;\n      }).join('\\n');\n\n  return processedText;\n}\n\n/**\n * Binds copy functionality to the given terminal.\n * @param {ClipboardEvent} ev The original copy event to be handled\n */\nexport function copyHandler(ev: ClipboardEvent, term: ITerminal) {\n  // We cast `window` to `any` type, because TypeScript has not declared the `clipboardData`\n  // property that we use below for Internet Explorer.\n  let copiedText = window.getSelection().toString(),\n      text = prepareTextForClipboard(copiedText);\n\n  if (term.browser.isMSIE) {\n    window.clipboardData.setData('Text', text);\n  } else {\n    ev.clipboardData.setData('text/plain', text);\n  }\n\n  ev.preventDefault(); // Prevent or the original text will be copied.\n}\n\n/**\n * Redirect the clipboard's data to the terminal's input handler.\n * @param {ClipboardEvent} ev The original paste event to be handled\n * @param {Terminal} term The terminal on which to apply the handled paste event\n */\nexport function pasteHandler(ev: ClipboardEvent, term: ITerminal) {\n  ev.stopPropagation();\n\n  let text: string;\n\n  let dispatchPaste = function(text) {\n    term.handler(text);\n    term.textarea.value = '';\n    return term.cancel(ev);\n  };\n\n  if (term.browser.isMSIE) {\n    if (window.clipboardData) {\n      text = window.clipboardData.getData('Text');\n      dispatchPaste(text);\n    }\n  } else {\n    if (ev.clipboardData) {\n      text = ev.clipboardData.getData('text/plain');\n      dispatchPaste(text);\n    }\n  }\n}\n\n/**\n * Bind to right-click event and allow right-click copy and paste.\n *\n * **Logic**\n * If text is selected and right-click happens on selected text, then\n * do nothing to allow seamless copying.\n * If no text is selected or right-click is outside of the selection\n * area, then bring the terminal's input below the cursor, in order to\n * trigger the event on the textarea and allow-right click paste, without\n * caring about disappearing selection.\n * @param {MouseEvent} ev The original right click event to be handled\n * @param {Terminal} term The terminal on which to apply the handled paste event\n */\nexport function rightClickHandler(ev: MouseEvent, term: ITerminal) {\n  let s = document.getSelection(),\n      selectedText = prepareTextForClipboard(s.toString()),\n      clickIsOnSelection = false,\n      x = ev.clientX,\n      y = ev.clientY;\n\n  if (s.rangeCount) {\n    let r = s.getRangeAt(0),\n        cr = r.getClientRects();\n\n    for (let i = 0; i < cr.length; i++) {\n      let rect = cr[i];\n\n      clickIsOnSelection = (\n        (x > rect.left) && (x < rect.right) &&\n        (y > rect.top) && (y < rect.bottom)\n      );\n\n      if (clickIsOnSelection) {\n        break;\n      }\n    }\n    // If we clicked on selection and selection is not a single space,\n    // then mark the right click as copy-only. We check for the single\n    // space selection, as this can happen when clicking on an &nbsp;\n    // and there is not much pointing in copying a single space.\n    if (selectedText.match(/^\\s$/) || !selectedText.length) {\n      clickIsOnSelection = false;\n    }\n  }\n\n  // Bring textarea at the cursor position\n  if (!clickIsOnSelection) {\n    term.textarea.style.position = 'fixed';\n    term.textarea.style.width = '20px';\n    term.textarea.style.height = '20px';\n    term.textarea.style.left = (x - 10) + 'px';\n    term.textarea.style.top = (y - 10) + 'px';\n    term.textarea.style.zIndex = '1000';\n    term.textarea.focus();\n\n    // Reset the terminal textarea's styling\n    setTimeout(function () {\n      term.textarea.style.position = null;\n      term.textarea.style.width = null;\n      term.textarea.style.height = null;\n      term.textarea.style.left = null;\n      term.textarea.style.top = null;\n      term.textarea.style.zIndex = null;\n    }, 4);\n  }\n}\n","/**\n * @license MIT\n */\n\nimport { ITerminal } from './Interfaces';\nimport { CharMeasure } from './utils/CharMeasure';\n\n/**\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\n * Logic for the virtual scroll bar is included in this object.\n */\nexport class Viewport {\n  private currentRowHeight: number;\n  private lastRecordedBufferLength: number;\n  private lastRecordedViewportHeight: number;\n\n  /**\n   * Creates a new Viewport.\n   * @param terminal The terminal this viewport belongs to.\n   * @param viewportElement The DOM element acting as the viewport.\n   * @param scrollArea The DOM element acting as the scroll area.\n   * @param charMeasureElement A DOM element used to measure the character size of. the terminal.\n   */\n  constructor(\n    private terminal: ITerminal,\n    private viewportElement: HTMLElement,\n    private scrollArea: HTMLElement,\n    private charMeasure: CharMeasure\n  ) {\n    this.currentRowHeight = 0;\n    this.lastRecordedBufferLength = 0;\n    this.lastRecordedViewportHeight = 0;\n\n    this.terminal.on('scroll', this.syncScrollArea.bind(this));\n    this.terminal.on('resize', this.syncScrollArea.bind(this));\n    this.viewportElement.addEventListener('scroll', this.onScroll.bind(this));\n\n    // Perform this async to ensure the CharMeasure is ready.\n    setTimeout(() => this.syncScrollArea(), 0);\n  }\n\n  /**\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\n   * necessary.\n   * @param charSize A character size measurement bounding rect object, if it doesn't exist it will\n   *   be created.\n   */\n  private refresh(): void {\n    if (this.charMeasure.height > 0) {\n      const rowHeightChanged = this.charMeasure.height !== this.currentRowHeight;\n      if (rowHeightChanged) {\n        this.currentRowHeight = this.charMeasure.height;\n        this.viewportElement.style.lineHeight = this.charMeasure.height + 'px';\n        this.terminal.rowContainer.style.lineHeight = this.charMeasure.height + 'px';\n      }\n      const viewportHeightChanged = this.lastRecordedViewportHeight !== this.terminal.rows;\n      if (rowHeightChanged || viewportHeightChanged) {\n        this.lastRecordedViewportHeight = this.terminal.rows;\n        this.viewportElement.style.height = this.charMeasure.height * this.terminal.rows + 'px';\n      }\n      this.scrollArea.style.height = (this.charMeasure.height * this.lastRecordedBufferLength) + 'px';\n    }\n  }\n\n  /**\n   * Updates dimensions and synchronizes the scroll area if necessary.\n   */\n  public syncScrollArea(): void {\n    if (this.lastRecordedBufferLength !== this.terminal.lines.length) {\n      // If buffer height changed\n      this.lastRecordedBufferLength = this.terminal.lines.length;\n      this.refresh();\n    } else if (this.lastRecordedViewportHeight !== this.terminal.rows) {\n      // If viewport height changed\n      this.refresh();\n    } else {\n      // If size has changed, refresh viewport\n      if (this.charMeasure.height !== this.currentRowHeight) {\n        this.refresh();\n      }\n    }\n\n    // Sync scrollTop\n    const scrollTop = this.terminal.ydisp * this.currentRowHeight;\n    if (this.viewportElement.scrollTop !== scrollTop) {\n      this.viewportElement.scrollTop = scrollTop;\n    }\n  }\n\n  /**\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\n   * terminal to scroll to it.\n   * @param ev The scroll event.\n   */\n  private onScroll(ev: Event) {\n    const newRow = Math.round(this.viewportElement.scrollTop / this.currentRowHeight);\n    const diff = newRow - this.terminal.ydisp;\n    this.terminal.scrollDisp(diff, true);\n  }\n\n  /**\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\n   * `Viewport`.\n   * @param ev The mouse wheel event.\n   */\n  public onWheel(ev: WheelEvent) {\n    if (ev.deltaY === 0) {\n      // Do nothing if it's not a vertical scroll event\n      return;\n    }\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\n    let multiplier = 1;\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      multiplier = this.currentRowHeight;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      multiplier = this.currentRowHeight * this.terminal.rows;\n    }\n    this.viewportElement.scrollTop += ev.deltaY * multiplier;\n    // Prevent the page from scrolling when the terminal scrolls\n    ev.preventDefault();\n  };\n}\n","/**\n * @license MIT\n */\n\nimport { ITerminal } from './Interfaces';\n\n/**\n * The maximum number of refresh frames to skip when the write buffer is non-\n * empty. Note that these frames may be intermingled with frames that are\n * skipped via requestAnimationFrame's mechanism.\n */\nconst MAX_REFRESH_FRAME_SKIP = 5;\n\n/**\n * Flags used to render terminal text properly.\n */\nenum FLAGS {\n  BOLD = 1,\n  UNDERLINE = 2,\n  BLINK = 4,\n  INVERSE = 8,\n  INVISIBLE = 16\n};\n\nlet brokenBold: boolean = null;\n\nexport class Renderer {\n  /** A queue of the rows to be refreshed */\n  private _refreshRowsQueue: {start: number, end: number}[] = [];\n  private _refreshFramesSkipped = 0;\n  private _refreshAnimationFrame = null;\n\n  constructor(private _terminal: ITerminal) {\n    // Figure out whether boldness affects\n    // the character width of monospace fonts.\n    if (brokenBold === null) {\n      brokenBold = checkBoldBroken((<any>this._terminal).element);\n    }\n\n    // TODO: Pull more DOM interactions into Renderer.constructor, element for\n    // example should be owned by Renderer (and also exposed by Terminal due to\n    // to established public API).\n  }\n\n  /**\n   * Queues a refresh between two rows (inclusive), to be done on next animation\n   * frame.\n   * @param {number} start The start row.\n   * @param {number} end The end row.\n   */\n  public queueRefresh(start: number, end: number): void {\n    this._refreshRowsQueue.push({ start: start, end: end });\n    if (!this._refreshAnimationFrame) {\n      this._refreshAnimationFrame = window.requestAnimationFrame(this._refreshLoop.bind(this));\n    }\n  }\n\n  /**\n   * Performs the refresh loop callback, calling refresh only if a refresh is\n   * necessary before queueing up the next one.\n   */\n  private _refreshLoop(): void {\n    // Skip MAX_REFRESH_FRAME_SKIP frames if the writeBuffer is non-empty as it\n    // will need to be immediately refreshed anyway. This saves a lot of\n    // rendering time as the viewport DOM does not need to be refreshed, no\n    // scroll events, no layouts, etc.\n    const skipFrame = this._terminal.writeBuffer.length > 0 && this._refreshFramesSkipped++ <= MAX_REFRESH_FRAME_SKIP;\n    if (skipFrame) {\n      this._refreshAnimationFrame = window.requestAnimationFrame(this._refreshLoop.bind(this));\n      return;\n    }\n\n    this._refreshFramesSkipped = 0;\n    let start;\n    let end;\n    if (this._refreshRowsQueue.length > 4) {\n      // Just do a full refresh when 5+ refreshes are queued\n      start = 0;\n      end = this._terminal.rows - 1;\n    } else {\n      // Get start and end rows that need refreshing\n      start = this._refreshRowsQueue[0].start;\n      end = this._refreshRowsQueue[0].end;\n      for (let i = 1; i < this._refreshRowsQueue.length; i++) {\n        if (this._refreshRowsQueue[i].start < start) {\n          start = this._refreshRowsQueue[i].start;\n        }\n        if (this._refreshRowsQueue[i].end > end) {\n          end = this._refreshRowsQueue[i].end;\n        }\n      }\n    }\n    this._refreshRowsQueue = [];\n    this._refreshAnimationFrame = null;\n    this._refresh(start, end);\n  }\n\n  /**\n   * Refreshes (re-renders) terminal content within two rows (inclusive)\n   *\n   * Rendering Engine:\n   *\n   * In the screen buffer, each character is stored as a an array with a character\n   * and a 32-bit integer:\n   *   - First value: a utf-16 character.\n   *   - Second value:\n   *   - Next 9 bits: background color (0-511).\n   *   - Next 9 bits: foreground color (0-511).\n   *   - Next 14 bits: a mask for misc. flags:\n   *     - 1=bold\n   *     - 2=underline\n   *     - 4=blink\n   *     - 8=inverse\n   *     - 16=invisible\n   *\n   * @param {number} start The row to start from (between 0 and terminal's height terminal - 1)\n   * @param {number} end The row to end at (between fromRow and terminal's height terminal - 1)\n   */\n  private _refresh(start: number, end: number): void {\n    let x, y, i, line, out, ch, ch_width, width, data, attr, bg, fg, flags, row, parent, focused = document.activeElement;\n\n    // If this is a big refresh, remove the terminal rows from the DOM for faster calculations\n    if (end - start >= this._terminal.rows / 2) {\n      parent = this._terminal.element.parentNode;\n      if (parent) {\n        this._terminal.element.removeChild(this._terminal.rowContainer);\n      }\n    }\n\n    width = this._terminal.cols;\n    y = start;\n\n    if (end >= this._terminal.rows) {\n      this._terminal.log('`end` is too large. Most likely a bad CSR.');\n      end = this._terminal.rows - 1;\n    }\n\n    for (; y <= end; y++) {\n      row = y + this._terminal.ydisp;\n\n      line = this._terminal.lines.get(row);\n      if (!line || !this._terminal.children[y]) {\n        // Continue if the line is not available, this means a resize is currently in progress\n        continue;\n      }\n      out = '';\n\n      if (this._terminal.y === y - (this._terminal.ybase - this._terminal.ydisp)\n          && this._terminal.cursorState\n          && !this._terminal.cursorHidden) {\n        x = this._terminal.x;\n      } else {\n        x = -1;\n      }\n\n      attr = this._terminal.defAttr;\n      i = 0;\n\n      for (; i < width; i++) {\n        if (!line[i]) {\n          // Continue if the character is not available, this means a resize is currently in progress\n          continue;\n        }\n        data = line[i][0];\n        ch = line[i][1];\n        ch_width = line[i][2];\n        if (!ch_width)\n          continue;\n\n        if (i === x) data = -1;\n\n        if (data !== attr) {\n          if (attr !== this._terminal.defAttr) {\n            out += '</span>';\n          }\n          if (data !== this._terminal.defAttr) {\n            if (data === -1) {\n              out += '<span class=\"reverse-video terminal-cursor\">';\n            } else {\n              let classNames = [];\n\n              bg = data & 0x1ff;\n              fg = (data >> 9) & 0x1ff;\n              flags = data >> 18;\n\n              if (flags & FLAGS.BOLD) {\n                if (!brokenBold) {\n                  classNames.push('xterm-bold');\n                }\n                // See: XTerm*boldColors\n                if (fg < 8) fg += 8;\n              }\n\n              if (flags & FLAGS.UNDERLINE) {\n                classNames.push('xterm-underline');\n              }\n\n              if (flags & FLAGS.BLINK) {\n                classNames.push('xterm-blink');\n              }\n\n              // If inverse flag is on, then swap the foreground and background variables.\n              if (flags & FLAGS.INVERSE) {\n                /* One-line variable swap in JavaScript: http://stackoverflow.com/a/16201730 */\n                bg = [fg, fg = bg][0];\n                // Should inverse just be before the\n                // above boldColors effect instead?\n                if ((flags & 1) && fg < 8) fg += 8;\n              }\n\n              if (flags & FLAGS.INVISIBLE) {\n                classNames.push('xterm-hidden');\n              }\n\n              /**\n               * Weird situation: Invert flag used black foreground and white background results\n               * in invalid background color, positioned at the 256 index of the 256 terminal\n               * color map. Pin the colors manually in such a case.\n               *\n               * Source: https://github.com/sourcelair/xterm.js/issues/57\n               */\n              if (flags & FLAGS.INVERSE) {\n                if (bg === 257) {\n                  bg = 15;\n                }\n                if (fg === 256) {\n                  fg = 0;\n                }\n              }\n\n              if (bg < 256) {\n                classNames.push('xterm-bg-color-' + bg);\n              }\n\n              if (fg < 256) {\n                classNames.push('xterm-color-' + fg);\n              }\n\n              out += '<span';\n              if (classNames.length) {\n                out += ' class=\"' + classNames.join(' ') + '\"';\n              }\n              out += '>';\n            }\n          }\n        }\n\n        if (ch_width === 2) {\n          out += '<span class=\"xterm-wide-char\">';\n        }\n        switch (ch) {\n          case '&':\n            out += '&amp;';\n            break;\n          case '<':\n            out += '&lt;';\n            break;\n          case '>':\n            out += '&gt;';\n            break;\n          default:\n            if (ch <= ' ') {\n              out += '&nbsp;';\n            } else {\n              out += ch;\n            }\n            break;\n        }\n        if (ch_width === 2) {\n          out += '</span>';\n        }\n\n        attr = data;\n      }\n\n      if (attr !== this._terminal.defAttr) {\n        out += '</span>';\n      }\n\n      this._terminal.children[y].innerHTML = out;\n    }\n\n    if (parent) {\n      this._terminal.element.appendChild(this._terminal.rowContainer);\n    }\n\n    this._terminal.emit('refresh', {element: this._terminal.element, start: start, end: end});\n  };\n}\n\n\n// if bold is broken, we can't\n// use it in the terminal.\nfunction checkBoldBroken(terminal) {\n  const document = terminal.ownerDocument;\n  const el = document.createElement('span');\n  el.innerHTML = 'hello world';\n  terminal.appendChild(el);\n  const w1 = el.offsetWidth;\n  const h1 = el.offsetHeight;\n  el.style.fontWeight = 'bold';\n  const w2 = el.offsetWidth;\n  const h2 = el.offsetHeight;\n  terminal.removeChild(el);\n  return w1 !== w2 || h1 !== h2;\n}\n","/**\n * @license MIT\n */\n\nimport { C0 } from './EscapeSequences';\nimport { IInputHandler } from './Interfaces';\nimport { CHARSETS, DEFAULT_CHARSET } from './Charsets';\n\nconst normalStateHandler: {[key: string]: (parser: Parser, handler: IInputHandler) => void} = {};\nnormalStateHandler[C0.BEL] = (parser, handler) => handler.bell();\nnormalStateHandler[C0.LF] = (parser, handler) => handler.lineFeed();\nnormalStateHandler[C0.VT] = normalStateHandler[C0.LF];\nnormalStateHandler[C0.FF] = normalStateHandler[C0.LF];\nnormalStateHandler[C0.CR] = (parser, handler) => handler.carriageReturn();\nnormalStateHandler[C0.BS] = (parser, handler) => handler.backspace();\nnormalStateHandler[C0.HT] = (parser, handler) => handler.tab();\nnormalStateHandler[C0.SO] = (parser, handler) => handler.shiftOut();\nnormalStateHandler[C0.SI] = (parser, handler) => handler.shiftIn();\nnormalStateHandler[C0.ESC] = (parser, handler) => parser.setState(ParserState.ESCAPED);\n\n// TODO: Remove terminal when parser owns params and currentParam\nconst escapedStateHandler: {[key: string]: (parser: Parser, terminal: any) => void} = {};\nescapedStateHandler['['] = (parser, terminal) => {\n  // ESC [ Control Sequence Introducer (CSI  is 0x9b)\n  terminal.params = [];\n  terminal.currentParam = 0;\n  parser.setState(ParserState.CSI_PARAM);\n};\nescapedStateHandler[']'] = (parser, terminal) => {\n  // ESC ] Operating System Command (OSC is 0x9d)\n  terminal.params = [];\n  terminal.currentParam = 0;\n  parser.setState(ParserState.OSC);\n};\nescapedStateHandler['P'] = (parser, terminal) => {\n  // ESC P Device Control String (DCS is 0x90)\n  terminal.params = [];\n  terminal.currentParam = 0;\n  parser.setState(ParserState.DCS);\n};\nescapedStateHandler['_'] = (parser, terminal) => {\n  // ESC _ Application Program Command ( APC is 0x9f).\n  parser.setState(ParserState.IGNORE);\n};\nescapedStateHandler['^'] = (parser, terminal) => {\n  // ESC ^ Privacy Message ( PM is 0x9e).\n  parser.setState(ParserState.IGNORE);\n};\nescapedStateHandler['c'] = (parser, terminal) => {\n  // ESC c Full Reset (RIS).\n  terminal.reset();\n};\nescapedStateHandler['E'] = (parser, terminal) => {\n  // ESC E Next Line ( NEL is 0x85).\n  terminal.x = 0;\n  terminal.index();\n  parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['D'] = (parser, terminal) => {\n  // ESC D Index ( IND is 0x84).\n  terminal.index();\n  parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['M'] = (parser, terminal) => {\n  // ESC M Reverse Index ( RI is 0x8d).\n  terminal.reverseIndex();\n  parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['%'] = (parser, terminal) => {\n  // ESC % Select default/utf-8 character set.\n  // @ = default, G = utf-8\n  terminal.setgLevel(0);\n  terminal.setgCharset(0, DEFAULT_CHARSET); // US (default)\n  parser.setState(ParserState.NORMAL);\n  parser.skipNextChar();\n};\nescapedStateHandler[C0.CAN] = (parser) => parser.setState(ParserState.NORMAL);\n\nconst csiParamStateHandler: {[key: string]: (parser: Parser) => void} = {};\ncsiParamStateHandler['?'] = (parser) => parser.setPrefix('?');\ncsiParamStateHandler['>'] = (parser) => parser.setPrefix('>');\ncsiParamStateHandler['!'] = (parser) => parser.setPrefix('!');\ncsiParamStateHandler['0'] = (parser) => parser.setParam(parser.getParam() * 10);\ncsiParamStateHandler['1'] = (parser) => parser.setParam(parser.getParam() * 10 + 1);\ncsiParamStateHandler['2'] = (parser) => parser.setParam(parser.getParam() * 10 + 2);\ncsiParamStateHandler['3'] = (parser) => parser.setParam(parser.getParam() * 10 + 3);\ncsiParamStateHandler['4'] = (parser) => parser.setParam(parser.getParam() * 10 + 4);\ncsiParamStateHandler['5'] = (parser) => parser.setParam(parser.getParam() * 10 + 5);\ncsiParamStateHandler['6'] = (parser) => parser.setParam(parser.getParam() * 10 + 6);\ncsiParamStateHandler['7'] = (parser) => parser.setParam(parser.getParam() * 10 + 7);\ncsiParamStateHandler['8'] = (parser) => parser.setParam(parser.getParam() * 10 + 8);\ncsiParamStateHandler['9'] = (parser) => parser.setParam(parser.getParam() * 10 + 9);\ncsiParamStateHandler['$'] = (parser) => parser.setPostfix('$');\ncsiParamStateHandler['\"'] = (parser) => parser.setPostfix('\"');\ncsiParamStateHandler[' '] = (parser) => parser.setPostfix(' ');\ncsiParamStateHandler['\\''] = (parser) => parser.setPostfix('\\'');\ncsiParamStateHandler[';'] = (parser) => parser.finalizeParam();\ncsiParamStateHandler[C0.CAN] = (parser) => parser.setState(ParserState.NORMAL);\n\nconst csiStateHandler: {[key: string]: (handler: IInputHandler, params: number[], prefix: string, postfix: string, parser: Parser) => void} = {};\ncsiStateHandler['@'] = (handler, params, prefix) => handler.insertChars(params);\ncsiStateHandler['A'] = (handler, params, prefix) => handler.cursorUp(params);\ncsiStateHandler['B'] = (handler, params, prefix) => handler.cursorDown(params);\ncsiStateHandler['C'] = (handler, params, prefix) => handler.cursorForward(params);\ncsiStateHandler['D'] = (handler, params, prefix) => handler.cursorBackward(params);\ncsiStateHandler['E'] = (handler, params, prefix) => handler.cursorNextLine(params);\ncsiStateHandler['F'] = (handler, params, prefix) => handler.cursorPrecedingLine(params);\ncsiStateHandler['G'] = (handler, params, prefix) => handler.cursorCharAbsolute(params);\ncsiStateHandler['H'] = (handler, params, prefix) => handler.cursorPosition(params);\ncsiStateHandler['I'] = (handler, params, prefix) => handler.cursorForwardTab(params);\ncsiStateHandler['J'] = (handler, params, prefix) => handler.eraseInDisplay(params);\ncsiStateHandler['K'] = (handler, params, prefix) => handler.eraseInLine(params);\ncsiStateHandler['L'] = (handler, params, prefix) => handler.insertLines(params);\ncsiStateHandler['M'] = (handler, params, prefix) => handler.deleteLines(params);\ncsiStateHandler['P'] = (handler, params, prefix) => handler.deleteChars(params);\ncsiStateHandler['S'] = (handler, params, prefix) => handler.scrollUp(params);\ncsiStateHandler['T'] = (handler, params, prefix) => {\n  if (params.length < 2 && !prefix) {\n    handler.scrollDown(params);\n  }\n};\ncsiStateHandler['X'] = (handler, params, prefix) => handler.eraseChars(params);\ncsiStateHandler['Z'] = (handler, params, prefix) => handler.cursorBackwardTab(params);\ncsiStateHandler['`'] = (handler, params, prefix) => handler.charPosAbsolute(params);\ncsiStateHandler['a'] = (handler, params, prefix) => handler.HPositionRelative(params);\ncsiStateHandler['b'] = (handler, params, prefix) => handler.repeatPrecedingCharacter(params);\ncsiStateHandler['c'] = (handler, params, prefix) => handler.sendDeviceAttributes(params);\ncsiStateHandler['d'] = (handler, params, prefix) => handler.linePosAbsolute(params);\ncsiStateHandler['e'] = (handler, params, prefix) => handler.VPositionRelative(params);\ncsiStateHandler['f'] = (handler, params, prefix) => handler.HVPosition(params);\ncsiStateHandler['g'] = (handler, params, prefix) => handler.tabClear(params);\ncsiStateHandler['h'] = (handler, params, prefix) => handler.setMode(params);\ncsiStateHandler['l'] = (handler, params, prefix) => handler.resetMode(params);\ncsiStateHandler['m'] = (handler, params, prefix) => handler.charAttributes(params);\ncsiStateHandler['n'] = (handler, params, prefix) => handler.deviceStatus(params);\ncsiStateHandler['p'] = (handler, params, prefix) => {\n  switch (prefix) {\n    case '!': handler.softReset(params); break;\n  }\n};\ncsiStateHandler['q'] = (handler, params, prefix, postfix) => {\n  if (postfix === ' ') {\n    handler.setCursorStyle(params);\n  }\n};\ncsiStateHandler['r'] = (handler, params) => handler.setScrollRegion(params);\ncsiStateHandler['s'] = (handler, params) => handler.saveCursor(params);\ncsiStateHandler['u'] = (handler, params) => handler.restoreCursor(params);\ncsiStateHandler[C0.CAN] = (handler, params, prefix, postfix, parser) => parser.setState(ParserState.NORMAL);\n\nenum ParserState {\n  NORMAL = 0,\n  ESCAPED = 1,\n  CSI_PARAM = 2,\n  CSI = 3,\n  OSC = 4,\n  CHARSET = 5,\n  DCS = 6,\n  IGNORE = 7\n}\n\n/**\n * The terminal's parser, all input into the terminal goes through the parser\n * which parses and defers the actual input handling the the IInputHandler\n * specified in the constructor.\n */\nexport class Parser {\n  private _state: ParserState;\n  private _position: number;\n\n  // TODO: Remove terminal when handler can do everything\n  constructor(\n    private _inputHandler: IInputHandler,\n    private _terminal: any\n  ) {\n    this._state = ParserState.NORMAL;\n  }\n\n  /**\n   * Parse and handle data.\n   *\n   * @param data The data to parse.\n   */\n  public parse(data: string) {\n    let l = data.length, j, cs, ch, code, low;\n\n    this._position = 0;\n    // apply leftover surrogate high from last write\n    if (this._terminal.surrogate_high) {\n      data = this._terminal.surrogate_high + data;\n      this._terminal.surrogate_high = '';\n    }\n\n    for (; this._position < l; this._position++) {\n      ch = data[this._position];\n\n      // FIXME: higher chars than 0xa0 are not allowed in escape sequences\n      //        --> maybe move to default\n      code = data.charCodeAt(this._position);\n      if (0xD800 <= code && code <= 0xDBFF) {\n        // we got a surrogate high\n        // get surrogate low (next 2 bytes)\n        low = data.charCodeAt(this._position + 1);\n        if (isNaN(low)) {\n          // end of data stream, save surrogate high\n          this._terminal.surrogate_high = ch;\n          continue;\n        }\n        code = ((code - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n        ch += data.charAt(this._position + 1);\n      }\n      // surrogate low - already handled above\n      if (0xDC00 <= code && code <= 0xDFFF)\n        continue;\n\n      switch (this._state) {\n        case ParserState.NORMAL:\n          if (ch in normalStateHandler) {\n            normalStateHandler[ch](this, this._inputHandler);\n          } else {\n            this._inputHandler.addChar(ch, code);\n          }\n          break;\n        case ParserState.ESCAPED:\n          if (ch in escapedStateHandler) {\n            escapedStateHandler[ch](this, this._terminal);\n            // Skip switch as it was just handled\n            break;\n          }\n          switch (ch) {\n\n            // ESC (,),*,+,-,. Designate G0-G2 Character Set.\n            case '(': // <-- this seems to get all the attention\n            case ')':\n            case '*':\n            case '+':\n            case '-':\n            case '.':\n              switch (ch) {\n                case '(':\n                  this._terminal.gcharset = 0;\n                  break;\n                case ')':\n                  this._terminal.gcharset = 1;\n                  break;\n                case '*':\n                  this._terminal.gcharset = 2;\n                  break;\n                case '+':\n                  this._terminal.gcharset = 3;\n                  break;\n                case '-':\n                  this._terminal.gcharset = 1;\n                  break;\n                case '.':\n                  this._terminal.gcharset = 2;\n                  break;\n              }\n              this._state = ParserState.CHARSET;\n              break;\n\n            // Designate G3 Character Set (VT300).\n            // A = ISO Latin-1 Supplemental.\n            // Not implemented.\n            case '/':\n              this._terminal.gcharset = 3;\n              this._state = ParserState.CHARSET;\n              this._position--;\n              break;\n\n            // ESC N\n            // Single Shift Select of G2 Character Set\n            // ( SS2 is 0x8e). This affects next character only.\n            case 'N':\n              break;\n            // ESC O\n            // Single Shift Select of G3 Character Set\n            // ( SS3 is 0x8f). This affects next character only.\n            case 'O':\n              break;\n            // ESC n\n            // Invoke the G2 Character Set as GL (LS2).\n            case 'n':\n              this._terminal.setgLevel(2);\n              break;\n            // ESC o\n            // Invoke the G3 Character Set as GL (LS3).\n            case 'o':\n              this._terminal.setgLevel(3);\n              break;\n            // ESC |\n            // Invoke the G3 Character Set as GR (LS3R).\n            case '|':\n              this._terminal.setgLevel(3);\n              break;\n            // ESC }\n            // Invoke the G2 Character Set as GR (LS2R).\n            case '}':\n              this._terminal.setgLevel(2);\n              break;\n            // ESC ~\n            // Invoke the G1 Character Set as GR (LS1R).\n            case '~':\n              this._terminal.setgLevel(1);\n              break;\n\n            // ESC 7 Save Cursor (DECSC).\n            case '7':\n              this._inputHandler.saveCursor();\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC 8 Restore Cursor (DECRC).\n            case '8':\n              this._inputHandler.restoreCursor();\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC # 3 DEC line height/width\n            case '#':\n              this._state = ParserState.NORMAL;\n              this._position++;\n              break;\n\n            // ESC H Tab Set (HTS is 0x88).\n            case 'H':\n              this._terminal.tabSet();\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC = Application Keypad (DECKPAM).\n            case '=':\n              this._terminal.log('Serial port requested application keypad.');\n              this._terminal.applicationKeypad = true;\n              this._terminal.viewport.syncScrollArea();\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC > Normal Keypad (DECKPNM).\n            case '>':\n              this._terminal.log('Switching back to normal keypad.');\n              this._terminal.applicationKeypad = false;\n              this._terminal.viewport.syncScrollArea();\n              this._state = ParserState.NORMAL;\n              break;\n\n            default:\n              this._state = ParserState.NORMAL;\n              this._terminal.error('Unknown ESC control: %s.', ch);\n              break;\n          }\n          break;\n\n        case ParserState.CHARSET:\n          if (ch in CHARSETS) {\n            cs = CHARSETS[ch];\n            if (ch === '/') { // ISOLatin is actually /A\n              this.skipNextChar();\n            }\n          } else {\n            cs = DEFAULT_CHARSET;\n          }\n          this._terminal.setgCharset(this._terminal.gcharset, cs);\n          this._terminal.gcharset = null;\n          this._state = ParserState.NORMAL;\n          break;\n\n        case ParserState.OSC:\n          // OSC Ps ; Pt ST\n          // OSC Ps ; Pt BEL\n          //   Set Text Parameters.\n          if (ch === C0.ESC || ch === C0.BEL) {\n            if (ch === C0.ESC) this._position++;\n\n            this._terminal.params.push(this._terminal.currentParam);\n\n            switch (this._terminal.params[0]) {\n              case 0:\n              case 1:\n              case 2:\n                if (this._terminal.params[1]) {\n                  this._terminal.title = this._terminal.params[1];\n                  this._terminal.handleTitle(this._terminal.title);\n                }\n                break;\n              case 3:\n                // set X property\n                break;\n              case 4:\n              case 5:\n                // change dynamic colors\n                break;\n              case 10:\n              case 11:\n              case 12:\n              case 13:\n              case 14:\n              case 15:\n              case 16:\n              case 17:\n              case 18:\n              case 19:\n                // change dynamic ui colors\n                break;\n              case 46:\n                // change log file\n                break;\n              case 50:\n                // dynamic font\n                break;\n              case 51:\n                // emacs shell\n                break;\n              case 52:\n                // manipulate selection data\n                break;\n              case 104:\n              case 105:\n              case 110:\n              case 111:\n              case 112:\n              case 113:\n              case 114:\n              case 115:\n              case 116:\n              case 117:\n              case 118:\n                // reset colors\n                break;\n            }\n\n            this._terminal.params = [];\n            this._terminal.currentParam = 0;\n            this._state = ParserState.NORMAL;\n          } else {\n            if (!this._terminal.params.length) {\n              if (ch >= '0' && ch <= '9') {\n                this._terminal.currentParam =\n                  this._terminal.currentParam * 10 + ch.charCodeAt(0) - 48;\n              } else if (ch === ';') {\n                this._terminal.params.push(this._terminal.currentParam);\n                this._terminal.currentParam = '';\n              }\n            } else {\n              this._terminal.currentParam += ch;\n            }\n          }\n          break;\n\n        case ParserState.CSI_PARAM:\n          if (ch in csiParamStateHandler) {\n            csiParamStateHandler[ch](this);\n            break;\n          }\n          this.finalizeParam();\n          // Fall through the CSI as this character should be the CSI code.\n          this._state = ParserState.CSI;\n\n        case ParserState.CSI:\n          if (ch in csiStateHandler) {\n            csiStateHandler[ch](this._inputHandler, this._terminal.params, this._terminal.prefix, this._terminal.postfix, this);\n          } else {\n            this._terminal.error('Unknown CSI code: %s.', ch);\n          }\n\n          this._state = ParserState.NORMAL;\n          this._terminal.prefix = '';\n          this._terminal.postfix = '';\n          break;\n\n        case ParserState.DCS:\n          if (ch === C0.ESC || ch === C0.BEL) {\n            if (ch === C0.ESC) this._position++;\n\n            switch (this._terminal.prefix) {\n              // User-Defined Keys (DECUDK).\n              case '':\n                break;\n\n              // Request Status String (DECRQSS).\n              // test: echo -e '\\eP$q\"p\\e\\\\'\n              case '$q':\n                let pt = this._terminal.currentParam\n                , valid = false;\n\n                switch (pt) {\n                  // DECSCA\n                  case '\"q':\n                    pt = '0\"q';\n                    break;\n\n                  // DECSCL\n                  case '\"p':\n                    pt = '61\"p';\n                    break;\n\n                  // DECSTBM\n                  case 'r':\n                    pt = ''\n                      + (this._terminal.scrollTop + 1)\n                      + ';'\n                      + (this._terminal.scrollBottom + 1)\n                      + 'r';\n                    break;\n\n                  // SGR\n                  case 'm':\n                    pt = '0m';\n                    break;\n\n                  default:\n                    this._terminal.error('Unknown DCS Pt: %s.', pt);\n                    pt = '';\n                    break;\n                }\n\n                this._terminal.send(C0.ESC + 'P' + +valid + '$r' + pt + C0.ESC + '\\\\');\n                break;\n\n              // Set Termcap/Terminfo Data (xterm, experimental).\n              case '+p':\n                break;\n\n              // Request Termcap/Terminfo String (xterm, experimental)\n              // Regular xterm does not even respond to this sequence.\n              // This can cause a small glitch in vim.\n              // test: echo -ne '\\eP+q6b64\\e\\\\'\n              case '+q':\n                // TODO: Don't declare pt twice\n                /*let*/ pt = this._terminal.currentParam\n                , valid = false;\n\n                this._terminal.send(C0.ESC + 'P' + +valid + '+r' + pt + C0.ESC + '\\\\');\n                break;\n\n              default:\n                this._terminal.error('Unknown DCS prefix: %s.', this._terminal.prefix);\n                break;\n            }\n\n            this._terminal.currentParam = 0;\n            this._terminal.prefix = '';\n            this._state = ParserState.NORMAL;\n          } else if (!this._terminal.currentParam) {\n            if (!this._terminal.prefix && ch !== '$' && ch !== '+') {\n              this._terminal.currentParam = ch;\n            } else if (this._terminal.prefix.length === 2) {\n              this._terminal.currentParam = ch;\n            } else {\n              this._terminal.prefix += ch;\n            }\n          } else {\n            this._terminal.currentParam += ch;\n          }\n          break;\n\n        case ParserState.IGNORE:\n          // For PM and APC.\n          if (ch === C0.ESC || ch === C0.BEL) {\n            if (ch === C0.ESC) this._position++;\n            this._state = ParserState.NORMAL;\n          }\n          break;\n      }\n    }\n  }\n\n  /**\n   * Set the parser's current parsing state.\n   *\n   * @param state The new state.\n   */\n  public setState(state: ParserState): void {\n    this._state = state;\n  }\n\n  /**\n   * Sets the parsier's current prefix. CSI codes can have prefixes of '?', '>'\n   * or '!'.\n   *\n   * @param prefix The prefix.\n   */\n  public setPrefix(prefix: string): void {\n    this._terminal.prefix = prefix;\n  }\n\n  /**\n   * Sets the parsier's current prefix. CSI codes can have postfixes of '$',\n   * '\"', ' ', '\\''.\n   *\n   * @param postfix The postfix.\n   */\n  public setPostfix(postfix: string): void {\n    this._terminal.postfix = postfix;\n  }\n\n  /**\n   * Sets the parser's current parameter.\n   *\n   * @param param the parameter.\n   */\n  public setParam(param: number) {\n    this._terminal.currentParam = param;\n  }\n\n  /**\n   * Gets the parser's current parameter.\n   */\n  public getParam(): number {\n    return this._terminal.currentParam;\n  }\n\n  /**\n   * Finalizes the parser's current parameter, adding it to the list of\n   * parameters and setting the new current parameter to 0.\n   */\n  public finalizeParam(): void {\n    this._terminal.params.push(this._terminal.currentParam);\n    this._terminal.currentParam = 0;\n  }\n\n  /**\n   * Tell the parser to skip the next character.\n   */\n  public skipNextChar(): void {\n    this._position++;\n  }\n\n  /**\n   * Tell the parser to repeat parsing the current character (for example if it\n   * needs parsing using a different state.\n   */\n  // public repeatChar(): void {\n  //   this._position--;\n  // }\n}\n","/**\n * @license MIT\n */\n\nimport { LinkMatcherOptions } from './Interfaces';\nimport { LinkMatcher, LinkMatcherHandler, LinkMatcherValidationCallback } from './Types';\n\nconst INVALID_LINK_CLASS = 'xterm-invalid-link';\n\nconst protocolClause = '(https?:\\\\/\\\\/)';\nconst domainCharacterSet = '[\\\\da-z\\\\.-]+';\nconst negatedDomainCharacterSet = '[^\\\\da-z\\\\.-]+';\nconst domainBodyClause = '(' + domainCharacterSet + ')';\nconst tldClause = '([a-z\\\\.]{2,6})';\nconst ipClause = '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})';\nconst localHostClause = '(localhost)';\nconst portClause = '(:\\\\d{1,5})';\nconst hostClause = '((' + domainBodyClause + '\\\\.' + tldClause + ')|' + ipClause + '|' + localHostClause + ')' + portClause + '?';\nconst pathClause = '(\\\\/[\\\\/\\\\w\\\\.\\\\-%~]*)*';\nconst queryStringHashFragmentCharacterSet = '[0-9\\\\w\\\\[\\\\]\\\\(\\\\)\\\\/\\\\?\\\\!#@$%&\\'*+,:;~\\\\=\\\\.\\\\-]*';\nconst queryStringClause = '(\\\\?' + queryStringHashFragmentCharacterSet + ')?';\nconst hashFragmentClause = '(#' + queryStringHashFragmentCharacterSet + ')?';\nconst negatedPathCharacterSet = '[^\\\\/\\\\w\\\\.\\\\-%]+';\nconst bodyClause = hostClause + pathClause + queryStringClause + hashFragmentClause;\nconst start = '(?:^|' + negatedDomainCharacterSet + ')(';\nconst end = ')($|' + negatedPathCharacterSet + ')';\nconst strictUrlRegex = new RegExp(start + protocolClause + bodyClause + end);\n\n/**\n * The ID of the built in http(s) link matcher.\n */\nconst HYPERTEXT_LINK_MATCHER_ID = 0;\n\n/**\n * The Linkifier applies links to rows shortly after they have been refreshed.\n */\nexport class Linkifier {\n  /**\n   * The time to wait after a row is changed before it is linkified. This prevents\n   * the costly operation of searching every row multiple times, potentially a\n   * huge amount of times.\n   */\n  protected static TIME_BEFORE_LINKIFY = 200;\n\n  protected _linkMatchers: LinkMatcher[];\n\n  private _document: Document;\n  private _rows: HTMLElement[];\n  private _rowTimeoutIds: number[];\n  private _nextLinkMatcherId = HYPERTEXT_LINK_MATCHER_ID;\n\n  constructor() {\n    this._rowTimeoutIds = [];\n    this._linkMatchers = [];\n    this.registerLinkMatcher(strictUrlRegex, null, { matchIndex: 1 });\n  }\n\n  /**\n   * Attaches the linkifier to the DOM, enabling linkification.\n   * @param document The document object.\n   * @param rows The array of rows to apply links to.\n   */\n  public attachToDom(document: Document, rows: HTMLElement[]) {\n    this._document = document;\n    this._rows = rows;\n  }\n\n  /**\n   * Queues a row for linkification.\n   * @param {number} rowIndex The index of the row to linkify.\n   */\n  public linkifyRow(rowIndex: number): void {\n    // Don't attempt linkify if not yet attached to DOM\n    if (!this._document) {\n      return;\n    }\n\n    const timeoutId = this._rowTimeoutIds[rowIndex];\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    this._rowTimeoutIds[rowIndex] = setTimeout(this._linkifyRow.bind(this, rowIndex), Linkifier.TIME_BEFORE_LINKIFY);\n  }\n\n  /**\n   * Attaches a handler for hypertext links, overriding default <a> behavior\n   * for standard http(s) links.\n   * @param {LinkHandler} handler The handler to use, this can be cleared with\n   * null.\n   */\n  public setHypertextLinkHandler(handler: LinkMatcherHandler): void {\n    this._linkMatchers[HYPERTEXT_LINK_MATCHER_ID].handler = handler;\n  }\n\n  /**\n   * Attaches a validation callback for hypertext links.\n   * @param {LinkMatcherValidationCallback} callback The callback to use, this\n   * can be cleared with null.\n   */\n  public setHypertextValidationCallback(callback: LinkMatcherValidationCallback): void {\n    this._linkMatchers[HYPERTEXT_LINK_MATCHER_ID].validationCallback = callback;\n  }\n\n  /**\n   * Registers a link matcher, allowing custom link patterns to be matched and\n   * handled.\n   * @param {RegExp} regex The regular expression to search for, specifically\n   * this searches the textContent of the rows. You will want to use \\s to match\n   * a space ' ' character for example.\n   * @param {LinkHandler} handler The callback when the link is called.\n   * @param {LinkMatcherOptions} [options] Options for the link matcher.\n   * @return {number} The ID of the new matcher, this can be used to deregister.\n   */\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options: LinkMatcherOptions = {}): number {\n    if (this._nextLinkMatcherId !== HYPERTEXT_LINK_MATCHER_ID && !handler) {\n      throw new Error('handler must be defined');\n    }\n    const matcher: LinkMatcher = {\n      id: this._nextLinkMatcherId++,\n      regex,\n      handler,\n      matchIndex: options.matchIndex,\n      validationCallback: options.validationCallback,\n      priority: options.priority || 0\n    };\n    this._addLinkMatcherToList(matcher);\n    return matcher.id;\n  }\n\n  /**\n   * Inserts a link matcher to the list in the correct position based on the\n   * priority of each link matcher. New link matchers of equal priority are\n   * considered after older link matchers.\n   * @param matcher The link matcher to be added.\n   */\n  private _addLinkMatcherToList(matcher: LinkMatcher): void {\n    if (this._linkMatchers.length === 0) {\n      this._linkMatchers.push(matcher);\n      return;\n    }\n\n    for (let i = this._linkMatchers.length - 1; i >= 0; i--) {\n      if (matcher.priority <= this._linkMatchers[i].priority) {\n        this._linkMatchers.splice(i + 1, 0, matcher);\n        return;\n      }\n    }\n\n    this._linkMatchers.splice(0, 0, matcher);\n  }\n\n  /**\n   * Deregisters a link matcher if it has been registered.\n   * @param {number} matcherId The link matcher's ID (returned after register)\n   * @return {boolean} Whether a link matcher was found and deregistered.\n   */\n  public deregisterLinkMatcher(matcherId: number): boolean {\n    // ID 0 is the hypertext link matcher which cannot be deregistered\n    for (let i = 1; i < this._linkMatchers.length; i++) {\n      if (this._linkMatchers[i].id === matcherId) {\n        this._linkMatchers.splice(i, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Linkifies a row.\n   * @param {number} rowIndex The index of the row to linkify.\n   */\n  private _linkifyRow(rowIndex: number): void {\n    const row = this._rows[rowIndex];\n    if (!row) {\n      return;\n    }\n    const text = row.textContent;\n    for (let i = 0; i < this._linkMatchers.length; i++) {\n      const matcher = this._linkMatchers[i];\n      const linkElements = this._doLinkifyRow(row, matcher);\n        if (linkElements.length > 0) {\n        // Fire validation callback\n        if (matcher.validationCallback) {\n          for (let j = 0; j < linkElements.length; j++) {\n            const element = linkElements[j];\n            matcher.validationCallback(element.textContent, element, isValid => {\n              if (!isValid) {\n                element.classList.add(INVALID_LINK_CLASS);\n              }\n            });\n          }\n        }\n        // Only allow a single LinkMatcher to trigger on any given row.\n        return;\n      }\n    }\n  }\n\n  /**\n   * Linkifies a row given a specific handler.\n   * @param {HTMLElement} row The row to linkify.\n   * @param {LinkMatcher} matcher The link matcher for this line.\n   * @return The link element if it was added, otherwise undefined.\n   */\n  private _doLinkifyRow(row: HTMLElement, matcher: LinkMatcher): HTMLElement[] {\n    // Iterate over nodes as we want to consider text nodes\n    let result = [];\n    const isHttpLinkMatcher = matcher.id === HYPERTEXT_LINK_MATCHER_ID;\n    const nodes = row.childNodes;\n\n    // Find the first match\n    let match = row.textContent.match(matcher.regex);\n    if (!match || match.length === 0) {\n      return result;\n    }\n    let uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\n    // Set the next searches start index\n    let rowStartIndex = match.index + uri.length;\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      const searchIndex = node.textContent.indexOf(uri);\n      if (searchIndex >= 0) {\n        const linkElement = this._createAnchorElement(uri, matcher.handler, isHttpLinkMatcher);\n        if (node.textContent.length === uri.length) {\n          // Matches entire string\n          if (node.nodeType === 3 /*Node.TEXT_NODE*/) {\n            this._replaceNode(node, linkElement);\n          } else {\n            const element = (<HTMLElement>node);\n            if (element.nodeName === 'A') {\n              // This row has already been linkified\n              return result;\n            }\n            element.innerHTML = '';\n            element.appendChild(linkElement);\n          }\n        } else {\n          // Matches part of string\n          const nodesAdded = this._replaceNodeSubstringWithNode(node, linkElement, uri, searchIndex);\n          // No need to consider the new nodes\n          i += nodesAdded;\n        }\n        result.push(linkElement);\n\n        // Find the next match\n        match = row.textContent.substring(rowStartIndex).match(matcher.regex);\n        if (!match || match.length === 0) {\n          return result;\n        }\n        uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\n        rowStartIndex += match.index + uri.length;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates a link anchor element.\n   * @param {string} uri The uri of the link.\n   * @return {HTMLAnchorElement} The link.\n   */\n  private _createAnchorElement(uri: string, handler: LinkMatcherHandler, isHypertextLinkHandler: boolean): HTMLAnchorElement {\n    const element = this._document.createElement('a');\n    element.textContent = uri;\n    element.draggable = false;\n    if (isHypertextLinkHandler) {\n      element.href = uri;\n      // Force link on another tab so work is not lost\n      element.target = '_blank';\n      element.addEventListener('click', (event: MouseEvent) => {\n        if (handler) {\n          return handler(event, uri);\n        }\n      });\n    } else {\n      element.addEventListener('click', (event: MouseEvent) => {\n        // Don't execute the handler if the link is flagged as invalid\n        if (element.classList.contains(INVALID_LINK_CLASS)) {\n          return;\n        }\n        return handler(event, uri);\n      });\n    }\n    return element;\n  }\n\n  /**\n   * Replace a node with 1 or more other nodes.\n   * @param {Node} oldNode The node to replace.\n   * @param {Node[]} newNodes The new nodes to insert in order.\n   */\n  private _replaceNode(oldNode: Node, ...newNodes: Node[]): void {\n    const parent = oldNode.parentNode;\n    for (let i = 0; i < newNodes.length; i++) {\n      parent.insertBefore(newNodes[i], oldNode);\n    }\n    parent.removeChild(oldNode);\n  }\n\n  /**\n   * Replace a substring within a node with a new node.\n   * @param {Node} targetNode The target node; either a text node or a <span>\n   * containing a single text node.\n   * @param {Node} newNode The new node to insert.\n   * @param {string} substring The substring to replace.\n   * @param {number} substringIndex The index of the substring within the string.\n   * @return The number of nodes to skip when searching for the next uri.\n   */\n  private _replaceNodeSubstringWithNode(targetNode: Node, newNode: Node, substring: string, substringIndex: number): number {\n    let node = targetNode;\n    if (node.nodeType !== 3/*Node.TEXT_NODE*/) {\n      node = node.childNodes[0];\n    }\n\n    // The targetNode will be either a text node or a <span>. The text node\n    // (targetNode or its only-child) needs to be replaced with newNode plus new\n    // text nodes potentially on either side.\n    if (node.childNodes.length === 0 && node.nodeType !== 3/*Node.TEXT_NODE*/) {\n      throw new Error('targetNode must be a text node or only contain a single text node');\n    }\n\n    const fullText = node.textContent;\n\n    if (substringIndex === 0) {\n      // Replace with <newNode><textnode>\n      const rightText = fullText.substring(substring.length);\n      const rightTextNode = this._document.createTextNode(rightText);\n      this._replaceNode(node, newNode, rightTextNode);\n      return 0;\n    }\n\n    if (substringIndex === targetNode.textContent.length - substring.length) {\n      // Replace with <textnode><newNode>\n      const leftText = fullText.substring(0, substringIndex);\n      const leftTextNode = this._document.createTextNode(leftText);\n      this._replaceNode(node, leftTextNode, newNode);\n      return 0;\n    }\n\n    // Replace with <textnode><newNode><textnode>\n    const leftText = fullText.substring(0, substringIndex);\n    const leftTextNode = this._document.createTextNode(leftText);\n    const rightText = fullText.substring(substringIndex + substring.length);\n    const rightTextNode = this._document.createTextNode(rightText);\n    this._replaceNode(node, leftTextNode, newNode, rightTextNode);\n    return 1;\n  }\n}\n","/**\n * @license MIT\n */\n\nimport { IInputHandler, ITerminal } from './Interfaces';\nimport { C0 } from './EscapeSequences';\nimport { DEFAULT_CHARSET } from './Charsets';\n\n/**\n * The terminal's standard implementation of IInputHandler, this handles all\n * input from the Parser.\n *\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\n * each function's header comment.\n */\nexport class InputHandler implements IInputHandler {\n  // TODO: We want to type _terminal when it's pulled into TS\n  constructor(private _terminal: any) { }\n\n  public addChar(char: string, code: number): void {\n    if (char >= ' ') {\n      // calculate print space\n      // expensive call, therefore we save width in line buffer\n      const ch_width = wcwidth(code);\n\n      if (this._terminal.charset && this._terminal.charset[char]) {\n        char = this._terminal.charset[char];\n      }\n\n      let row = this._terminal.y + this._terminal.ybase;\n\n      // insert combining char in last cell\n      // FIXME: needs handling after cursor jumps\n      if (!ch_width && this._terminal.x) {\n        // dont overflow left\n        if (this._terminal.lines.get(row)[this._terminal.x - 1]) {\n          if (!this._terminal.lines.get(row)[this._terminal.x - 1][2]) {\n\n            // found empty cell after fullwidth, need to go 2 cells back\n            if (this._terminal.lines.get(row)[this._terminal.x - 2])\n              this._terminal.lines.get(row)[this._terminal.x - 2][1] += char;\n\n          } else {\n            this._terminal.lines.get(row)[this._terminal.x - 1][1] += char;\n          }\n          this._terminal.updateRange(this._terminal.y);\n        }\n        return;\n      }\n\n      // goto next line if ch would overflow\n      // TODO: needs a global min terminal width of 2\n      if (this._terminal.x + ch_width - 1 >= this._terminal.cols) {\n        // autowrap - DECAWM\n        if (this._terminal.wraparoundMode) {\n          this._terminal.x = 0;\n          this._terminal.y++;\n          if (this._terminal.y > this._terminal.scrollBottom) {\n            this._terminal.y--;\n            this._terminal.scroll();\n          }\n        } else {\n          if (ch_width === 2)  // FIXME: check for xterm behavior\n            return;\n        }\n      }\n      row = this._terminal.y + this._terminal.ybase;\n\n      // insert mode: move characters to right\n      if (this._terminal.insertMode) {\n        // do this twice for a fullwidth char\n        for (let moves = 0; moves < ch_width; ++moves) {\n          // remove last cell, if it's width is 0\n          // we have to adjust the second last cell as well\n          const removed = this._terminal.lines.get(this._terminal.y + this._terminal.ybase).pop();\n          if (removed[2] === 0\n              && this._terminal.lines.get(row)[this._terminal.cols - 2]\n          && this._terminal.lines.get(row)[this._terminal.cols - 2][2] === 2)\n            this._terminal.lines.get(row)[this._terminal.cols - 2] = [this._terminal.curAttr, ' ', 1];\n\n          // insert empty cell at cursor\n          this._terminal.lines.get(row).splice(this._terminal.x, 0, [this._terminal.curAttr, ' ', 1]);\n        }\n      }\n\n      this._terminal.lines.get(row)[this._terminal.x] = [this._terminal.curAttr, char, ch_width];\n      this._terminal.x++;\n      this._terminal.updateRange(this._terminal.y);\n\n      // fullwidth char - set next cell width to zero and advance cursor\n      if (ch_width === 2) {\n        this._terminal.lines.get(row)[this._terminal.x] = [this._terminal.curAttr, '', 0];\n        this._terminal.x++;\n      }\n    }\n  }\n\n  /**\n   * BEL\n   * Bell (Ctrl-G).\n   */\n  public bell(): void {\n    if (!this._terminal.visualBell) {\n      return;\n    }\n    this._terminal.element.style.borderColor = 'white';\n    setTimeout(() => this._terminal.element.style.borderColor = '', 10);\n    if (this._terminal.popOnBell) {\n      this._terminal.focus();\n    }\n  }\n\n  /**\n   * LF\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\n   */\n  public lineFeed(): void {\n    if (this._terminal.convertEol) {\n      this._terminal.x = 0;\n    }\n    this._terminal.y++;\n    if (this._terminal.y > this._terminal.scrollBottom) {\n      this._terminal.y--;\n      this._terminal.scroll();\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._terminal.x >= this._terminal.cols) {\n      this._terminal.x--;\n    }\n  }\n\n  /**\n   * CR\n   * Carriage Return (Ctrl-M).\n   */\n  public carriageReturn(): void {\n    this._terminal.x = 0;\n  }\n\n  /**\n   * BS\n   * Backspace (Ctrl-H).\n   */\n  public backspace(): void {\n    if (this._terminal.x > 0) {\n      this._terminal.x--;\n    }\n  }\n\n  /**\n   * TAB\n   * Horizontal Tab (HT) (Ctrl-I).\n   */\n  public tab(): void {\n    this._terminal.x = this._terminal.nextStop();\n  }\n\n  /**\n   * SO\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\n   * G1 character set.\n   */\n  public shiftOut(): void {\n    this._terminal.setgLevel(1);\n  }\n\n  /**\n   * SI\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\n   * character set (the default).\n   */\n  public shiftIn(): void {\n    this._terminal.setgLevel(0);\n  }\n\n  /**\n   * CSI Ps @\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\n   */\n  public insertChars(params: number[]): void {\n    let param, row, j, ch;\n\n    param = params[0];\n    if (param < 1) param = 1;\n\n    row = this._terminal.y + this._terminal.ybase;\n    j = this._terminal.x;\n    ch = [this._terminal.eraseAttr(), ' ', 1]; // xterm\n\n    while (param-- && j < this._terminal.cols) {\n      this._terminal.lines.get(row).splice(j++, 0, ch);\n      this._terminal.lines.get(row).pop();\n    }\n  }\n\n  /**\n   * CSI Ps A\n   * Cursor Up Ps Times (default = 1) (CUU).\n   */\n  public cursorUp(params: number[]): void {\n    let param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    this._terminal.y -= param;\n    if (this._terminal.y < 0) {\n      this._terminal.y = 0;\n    }\n  }\n\n  /**\n   * CSI Ps B\n   * Cursor Down Ps Times (default = 1) (CUD).\n   */\n  public cursorDown(params: number[]) {\n    let param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    this._terminal.y += param;\n    if (this._terminal.y >= this._terminal.rows) {\n      this._terminal.y = this._terminal.rows - 1;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._terminal.x >= this._terminal.cols) {\n      this._terminal.x--;\n    }\n  }\n\n  /**\n   * CSI Ps C\n   * Cursor Forward Ps Times (default = 1) (CUF).\n   */\n  public cursorForward(params: number[]) {\n    let param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    this._terminal.x += param;\n    if (this._terminal.x >= this._terminal.cols) {\n      this._terminal.x = this._terminal.cols - 1;\n    }\n  }\n\n  /**\n   * CSI Ps D\n   * Cursor Backward Ps Times (default = 1) (CUB).\n   */\n  public cursorBackward(params: number[]) {\n    let param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._terminal.x >= this._terminal.cols) {\n      this._terminal.x--;\n    }\n    this._terminal.x -= param;\n    if (this._terminal.x < 0) {\n      this._terminal.x = 0;\n    }\n  }\n\n  /**\n   * CSI Ps E\n   * Cursor Next Line Ps Times (default = 1) (CNL).\n   * same as CSI Ps B ?\n   */\n  public cursorNextLine(params: number[]): void {\n    let param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    this._terminal.y += param;\n    if (this._terminal.y >= this._terminal.rows) {\n      this._terminal.y = this._terminal.rows - 1;\n    }\n    this._terminal.x = 0;\n  };\n\n\n  /**\n   * CSI Ps F\n   * Cursor Preceding Line Ps Times (default = 1) (CNL).\n   * reuse CSI Ps A ?\n   */\n  public cursorPrecedingLine(params: number[]): void {\n    let param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    this._terminal.y -= param;\n    if (this._terminal.y < 0) {\n      this._terminal.y = 0;\n    }\n    this._terminal.x = 0;\n  };\n\n\n  /**\n   * CSI Ps G\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\n   */\n  public cursorCharAbsolute(params: number[]): void {\n    let param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    this._terminal.x = param - 1;\n  }\n\n  /**\n   * CSI Ps ; Ps H\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\n   */\n  public cursorPosition(params: number[]): void {\n    let row, col;\n\n    row = params[0] - 1;\n\n    if (params.length >= 2) {\n      col = params[1] - 1;\n    } else {\n      col = 0;\n    }\n\n    if (row < 0) {\n      row = 0;\n    } else if (row >= this._terminal.rows) {\n      row = this._terminal.rows - 1;\n    }\n\n    if (col < 0) {\n      col = 0;\n    } else if (col >= this._terminal.cols) {\n      col = this._terminal.cols - 1;\n    }\n\n    this._terminal.x = col;\n    this._terminal.y = row;\n  }\n\n  /**\n   * CSI Ps I\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n   */\n  public cursorForwardTab(params: number[]): void {\n    let param = params[0] || 1;\n    while (param--) {\n      this._terminal.x = this._terminal.nextStop();\n    }\n  }\n\n  /**\n   * CSI Ps J  Erase in Display (ED).\n   *     Ps = 0  -> Erase Below (default).\n   *     Ps = 1  -> Erase Above.\n   *     Ps = 2  -> Erase All.\n   *     Ps = 3  -> Erase Saved Lines (xterm).\n   * CSI ? Ps J\n   *   Erase in Display (DECSED).\n   *     Ps = 0  -> Selective Erase Below (default).\n   *     Ps = 1  -> Selective Erase Above.\n   *     Ps = 2  -> Selective Erase All.\n   */\n  public eraseInDisplay(params: number[]): void {\n    let j;\n    switch (params[0]) {\n      case 0:\n        this._terminal.eraseRight(this._terminal.x, this._terminal.y);\n        j = this._terminal.y + 1;\n        for (; j < this._terminal.rows; j++) {\n          this._terminal.eraseLine(j);\n        }\n        break;\n      case 1:\n        this._terminal.eraseLeft(this._terminal.x, this._terminal.y);\n        j = this._terminal.y;\n        while (j--) {\n          this._terminal.eraseLine(j);\n        }\n        break;\n      case 2:\n        j = this._terminal.rows;\n        while (j--) this._terminal.eraseLine(j);\n        break;\n      case 3:\n        // Clear scrollback (everything not in viewport)\n        const scrollBackSize = this._terminal.lines.length - this._terminal.rows;\n        if (scrollBackSize > 0) {\n          this._terminal.lines.trimStart(scrollBackSize);\n          this._terminal.ybase = Math.max(this._terminal.ybase - scrollBackSize, 0);\n          this._terminal.ydisp = Math.max(this._terminal.ydisp - scrollBackSize, 0);\n        }\n        break;\n    }\n  }\n\n  /**\n   * CSI Ps K  Erase in Line (EL).\n   *     Ps = 0  -> Erase to Right (default).\n   *     Ps = 1  -> Erase to Left.\n   *     Ps = 2  -> Erase All.\n   * CSI ? Ps K\n   *   Erase in Line (DECSEL).\n   *     Ps = 0  -> Selective Erase to Right (default).\n   *     Ps = 1  -> Selective Erase to Left.\n   *     Ps = 2  -> Selective Erase All.\n   */\n  public eraseInLine(params: number[]): void {\n    switch (params[0]) {\n      case 0:\n        this._terminal.eraseRight(this._terminal.x, this._terminal.y);\n        break;\n      case 1:\n        this._terminal.eraseLeft(this._terminal.x, this._terminal.y);\n        break;\n      case 2:\n        this._terminal.eraseLine(this._terminal.y);\n        break;\n    }\n  }\n\n  /**\n   * CSI Ps L\n   * Insert Ps Line(s) (default = 1) (IL).\n   */\n  public insertLines(params: number[]): void {\n    let param, row, j;\n\n    param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    row = this._terminal.y + this._terminal.ybase;\n\n    j = this._terminal.rows - 1 - this._terminal.scrollBottom;\n    j = this._terminal.rows - 1 + this._terminal.ybase - j + 1;\n\n    while (param--) {\n      if (this._terminal.lines.length === this._terminal.lines.maxLength) {\n        // Trim the start of lines to make room for the new line\n        this._terminal.lines.trimStart(1);\n        this._terminal.ybase--;\n        this._terminal.ydisp--;\n        row--;\n        j--;\n      }\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._terminal.lines.splice(row, 0, this._terminal.blankLine(true));\n      this._terminal.lines.splice(j, 1);\n    }\n\n    // this.maxRange();\n    this._terminal.updateRange(this._terminal.y);\n    this._terminal.updateRange(this._terminal.scrollBottom);\n  }\n\n  /**\n   * CSI Ps M\n   * Delete Ps Line(s) (default = 1) (DL).\n   */\n  public deleteLines(params: number[]): void {\n    let param, row, j;\n\n    param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    row = this._terminal.y + this._terminal.ybase;\n\n    j = this._terminal.rows - 1 - this._terminal.scrollBottom;\n    j = this._terminal.rows - 1 + this._terminal.ybase - j;\n\n    while (param--) {\n      if (this._terminal.lines.length === this._terminal.lines.maxLength) {\n        // Trim the start of lines to make room for the new line\n        this._terminal.lines.trimStart(1);\n        this._terminal.ybase -= 1;\n        this._terminal.ydisp -= 1;\n      }\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._terminal.lines.splice(j + 1, 0, this._terminal.blankLine(true));\n      this._terminal.lines.splice(row, 1);\n    }\n\n    // this.maxRange();\n    this._terminal.updateRange(this._terminal.y);\n    this._terminal.updateRange(this._terminal.scrollBottom);\n  }\n\n  /**\n   * CSI Ps P\n   * Delete Ps Character(s) (default = 1) (DCH).\n   */\n  public deleteChars(params: number[]): void {\n    let param, row, ch;\n\n    param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n\n    row = this._terminal.y + this._terminal.ybase;\n    ch = [this._terminal.eraseAttr(), ' ', 1]; // xterm\n\n    while (param--) {\n      this._terminal.lines.get(row).splice(this._terminal.x, 1);\n      this._terminal.lines.get(row).push(ch);\n    }\n  }\n\n  /**\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\n   */\n  public scrollUp(params: number[]): void {\n    let param = params[0] || 1;\n    while (param--) {\n      this._terminal.lines.splice(this._terminal.ybase + this._terminal.scrollTop, 1);\n      this._terminal.lines.splice(this._terminal.ybase + this._terminal.scrollBottom, 0, this._terminal.blankLine());\n    }\n    // this.maxRange();\n    this._terminal.updateRange(this._terminal.scrollTop);\n    this._terminal.updateRange(this._terminal.scrollBottom);\n  }\n\n  /**\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\n   */\n  public scrollDown(params: number[]): void {\n    let param = params[0] || 1;\n    while (param--) {\n      this._terminal.lines.splice(this._terminal.ybase + this._terminal.scrollBottom, 1);\n      this._terminal.lines.splice(this._terminal.ybase + this._terminal.scrollTop, 0, this._terminal.blankLine());\n    }\n    // this.maxRange();\n    this._terminal.updateRange(this._terminal.scrollTop);\n    this._terminal.updateRange(this._terminal.scrollBottom);\n  }\n\n  /**\n   * CSI Ps X\n   * Erase Ps Character(s) (default = 1) (ECH).\n   */\n  public eraseChars(params: number[]): void {\n    let param, row, j, ch;\n\n    param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n\n    row = this._terminal.y + this._terminal.ybase;\n    j = this._terminal.x;\n    ch = [this._terminal.eraseAttr(), ' ', 1]; // xterm\n\n    while (param-- && j < this._terminal.cols) {\n      this._terminal.lines.get(row)[j++] = ch;\n    }\n  }\n\n  /**\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n   */\n  public cursorBackwardTab(params: number[]): void {\n    let param = params[0] || 1;\n    while (param--) {\n      this._terminal.x = this._terminal.prevStop();\n    }\n  }\n\n  /**\n   * CSI Pm `  Character Position Absolute\n   *   [column] (default = [row,1]) (HPA).\n   */\n  public charPosAbsolute(params: number[]): void {\n    let param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    this._terminal.x = param - 1;\n    if (this._terminal.x >= this._terminal.cols) {\n      this._terminal.x = this._terminal.cols - 1;\n    }\n  }\n\n  /**\n   * CSI Pm a  Character Position Relative\n   *   [columns] (default = [row,col+1]) (HPR)\n   * reuse CSI Ps C ?\n   */\n  public HPositionRelative(params: number[]): void {\n    let param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    this._terminal.x += param;\n    if (this._terminal.x >= this._terminal.cols) {\n      this._terminal.x = this._terminal.cols - 1;\n    }\n  }\n\n  /**\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\n   */\n  public repeatPrecedingCharacter(params: number[]): void {\n    let param = params[0] || 1\n      , line = this._terminal.lines.get(this._terminal.ybase + this._terminal.y)\n      , ch = line[this._terminal.x - 1] || [this._terminal.defAttr, ' ', 1];\n\n    while (param--) {\n      line[this._terminal.x++] = ch;\n    }\n  }\n\n  /**\n   * CSI Ps c  Send Device Attributes (Primary DA).\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\n   *     response depends on the decTerminalID resource setting.\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\n   *     -> CSI ? 6 c  (``VT102'')\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\n   *   The VT100-style response parameters do not mean anything by\n   *   themselves.  VT220 parameters do, telling the host what fea-\n   *   tures the terminal supports:\n   *     Ps = 1  -> 132-columns.\n   *     Ps = 2  -> Printer.\n   *     Ps = 6  -> Selective erase.\n   *     Ps = 8  -> User-defined keys.\n   *     Ps = 9  -> National replacement character sets.\n   *     Ps = 1 5  -> Technical characters.\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\n   * CSI > Ps c\n   *   Send Device Attributes (Secondary DA).\n   *     Ps = 0  or omitted -> request the terminal's identification\n   *     code.  The response depends on the decTerminalID resource set-\n   *     ting.  It should apply only to VT220 and up, but xterm extends\n   *     this to VT100.\n   *     -> CSI  > Pp ; Pv ; Pc c\n   *   where Pp denotes the terminal type\n   *     Pp = 0  -> ``VT100''.\n   *     Pp = 1  -> ``VT220''.\n   *   and Pv is the firmware version (for xterm, this was originally\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\n   *   nal, Pc indicates the ROM cartridge registration number and is\n   *   always zero.\n   * More information:\n   *   xterm/charproc.c - line 2012, for more information.\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\n   */\n  public sendDeviceAttributes(params: number[]): void {\n    if (params[0] > 0) {\n      return;\n    }\n\n    if (!this._terminal.prefix) {\n      if (this._terminal.is('xterm') || this._terminal.is('rxvt-unicode') || this._terminal.is('screen')) {\n        this._terminal.send(C0.ESC + '[?1;2c');\n      } else if (this._terminal.is('linux')) {\n        this._terminal.send(C0.ESC + '[?6c');\n      }\n    } else if (this._terminal.prefix === '>') {\n      // xterm and urxvt\n      // seem to spit this\n      // out around ~370 times (?).\n      if (this._terminal.is('xterm')) {\n        this._terminal.send(C0.ESC + '[>0;276;0c');\n      } else if (this._terminal.is('rxvt-unicode')) {\n        this._terminal.send(C0.ESC + '[>85;95;0c');\n      } else if (this._terminal.is('linux')) {\n        // not supported by linux console.\n        // linux console echoes parameters.\n        this._terminal.send(params[0] + 'c');\n      } else if (this._terminal.is('screen')) {\n        this._terminal.send(C0.ESC + '[>83;40003;0c');\n      }\n    }\n  }\n\n  /**\n   * CSI Pm d  Vertical Position Absolute (VPA)\n   *   [row] (default = [1,column])\n   */\n  public linePosAbsolute(params: number[]): void {\n    let param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    this._terminal.y = param - 1;\n    if (this._terminal.y >= this._terminal.rows) {\n      this._terminal.y = this._terminal.rows - 1;\n    }\n  }\n\n  /**\n   * CSI Pm e  Vertical Position Relative (VPR)\n   *   [rows] (default = [row+1,column])\n   * reuse CSI Ps B ?\n   */\n  public VPositionRelative(params: number[]): void {\n    let param = params[0];\n    if (param < 1) {\n      param = 1;\n    }\n    this._terminal.y += param;\n    if (this._terminal.y >= this._terminal.rows) {\n      this._terminal.y = this._terminal.rows - 1;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._terminal.x >= this._terminal.cols) {\n      this._terminal.x--;\n    }\n  }\n\n  /**\n   * CSI Ps ; Ps f\n   *   Horizontal and Vertical Position [row;column] (default =\n   *   [1,1]) (HVP).\n   */\n  public HVPosition(params: number[]): void {\n    if (params[0] < 1) params[0] = 1;\n    if (params[1] < 1) params[1] = 1;\n\n    this._terminal.y = params[0] - 1;\n    if (this._terminal.y >= this._terminal.rows) {\n      this._terminal.y = this._terminal.rows - 1;\n    }\n\n    this._terminal.x = params[1] - 1;\n    if (this._terminal.x >= this._terminal.cols) {\n      this._terminal.x = this._terminal.cols - 1;\n    }\n  }\n\n  /**\n   * CSI Ps g  Tab Clear (TBC).\n   *     Ps = 0  -> Clear Current Column (default).\n   *     Ps = 3  -> Clear All.\n   * Potentially:\n   *   Ps = 2  -> Clear Stops on Line.\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\n   */\n  public tabClear(params: number[]): void {\n    let param = params[0];\n    if (param <= 0) {\n      delete this._terminal.tabs[this._terminal.x];\n    } else if (param === 3) {\n      this._terminal.tabs = {};\n    }\n  }\n\n  /**\n   * CSI Pm h  Set Mode (SM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Insert Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Automatic Newline (LNM).\n   * CSI ? Pm h\n   *   DEC Private Mode Set (DECSET).\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\n   *     (DECANM), and set VT100 mode.\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\n   *     Ps = 5  -> Reverse Video (DECSCNM).\n   *     Ps = 6  -> Origin Mode (DECOM).\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n   *     tion Mouse Tracking.\n   *     Ps = 1 0  -> Show toolbar (rxvt).\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\n   *     Ps = 1 8  -> Print form feed (DECPFF).\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\n   *     RCM).\n   *     Ps = 4 4  -> Turn On Margin Bell.\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\n   *     compile-time option.\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 6 6  -> Application keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\n   *     (enables the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\n   *     Lock keys.  (This enables the numLock resource).\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\n   *     enables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\n   *     key.\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\n   *     enables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\n   *     (This enables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\n   *     Control-G is received.  (This enables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\n   *     is received.  (enables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\n   *     Screen Buffer, clearing it first.  (This may be disabled by\n   *     the titeInhibit resource).  This combines the effects of the 1\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\n   *     applications rather than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\n   * Modes:\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\n   */\n  public setMode(params: number[]): void {\n    if (params.length > 1) {\n      for (let i = 0; i < params.length; i++) {\n        this.setMode([params[i]]);\n      }\n\n      return;\n    }\n\n    if (!this._terminal.prefix) {\n      switch (params[0]) {\n        case 4:\n          this._terminal.insertMode = true;\n          break;\n        case 20:\n          // this._terminal.convertEol = true;\n          break;\n      }\n    } else if (this._terminal.prefix === '?') {\n      switch (params[0]) {\n        case 1:\n          this._terminal.applicationCursor = true;\n          break;\n        case 2:\n          this._terminal.setgCharset(0, DEFAULT_CHARSET);\n          this._terminal.setgCharset(1, DEFAULT_CHARSET);\n          this._terminal.setgCharset(2, DEFAULT_CHARSET);\n          this._terminal.setgCharset(3, DEFAULT_CHARSET);\n          // set VT100 mode here\n          break;\n        case 3: // 132 col mode\n          this._terminal.savedCols = this._terminal.cols;\n          this._terminal.resize(132, this._terminal.rows);\n          break;\n        case 6:\n          this._terminal.originMode = true;\n          break;\n        case 7:\n          this._terminal.wraparoundMode = true;\n          break;\n        case 12:\n          // this.cursorBlink = true;\n          break;\n        case 66:\n          this._terminal.log('Serial port requested application keypad.');\n          this._terminal.applicationKeypad = true;\n          this._terminal.viewport.syncScrollArea();\n          break;\n        case 9: // X10 Mouse\n          // no release, no motion, no wheel, no modifiers.\n        case 1000: // vt200 mouse\n          // no motion.\n          // no modifiers, except control on the wheel.\n        case 1002: // button event mouse\n        case 1003: // any event mouse\n          // any event - sends motion events,\n          // even if there is no button held down.\n\n          // TODO: Why are params[0] compares nested within a switch for params[0]?\n\n          this._terminal.x10Mouse = params[0] === 9;\n          this._terminal.vt200Mouse = params[0] === 1000;\n          this._terminal.normalMouse = params[0] > 1000;\n          this._terminal.mouseEvents = true;\n          this._terminal.element.style.cursor = 'default';\n          this._terminal.log('Binding to mouse events.');\n          break;\n        case 1004: // send focusin/focusout events\n          // focusin: ^[[I\n          // focusout: ^[[O\n          this._terminal.sendFocus = true;\n          break;\n        case 1005: // utf8 ext mode mouse\n          this._terminal.utfMouse = true;\n          // for wide terminals\n          // simply encodes large values as utf8 characters\n          break;\n        case 1006: // sgr ext mode mouse\n          this._terminal.sgrMouse = true;\n          // for wide terminals\n          // does not add 32 to fields\n          // press: ^[[<b;x;yM\n          // release: ^[[<b;x;ym\n          break;\n        case 1015: // urxvt ext mode mouse\n          this._terminal.urxvtMouse = true;\n          // for wide terminals\n          // numbers for fields\n          // press: ^[[b;x;yM\n          // motion: ^[[b;x;yT\n          break;\n        case 25: // show cursor\n          this._terminal.cursorHidden = false;\n          break;\n        case 1049: // alt screen buffer cursor\n          // this._terminal.saveCursor();\n          ; // FALL-THROUGH\n        case 47: // alt screen buffer\n        case 1047: // alt screen buffer\n          if (!this._terminal.normal) {\n            let normal = {\n              lines: this._terminal.lines,\n              ybase: this._terminal.ybase,\n              ydisp: this._terminal.ydisp,\n              x: this._terminal.x,\n              y: this._terminal.y,\n              scrollTop: this._terminal.scrollTop,\n              scrollBottom: this._terminal.scrollBottom,\n              tabs: this._terminal.tabs\n              // XXX save charset(s) here?\n              // charset: this._terminal.charset,\n              // glevel: this._terminal.glevel,\n              // charsets: this._terminal.charsets\n            };\n            this._terminal.reset();\n            this._terminal.viewport.syncScrollArea();\n            this._terminal.normal = normal;\n            this._terminal.showCursor();\n          }\n          break;\n      }\n    }\n  }\n\n  /**\n   * CSI Pm l  Reset Mode (RM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Replace Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\n   * CSI ? Pm l\n   *   DEC Private Mode Reset (DECRST).\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\n   *     Ps = 5  -> Normal Video (DECSCNM).\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\n   *     NRCM).\n   *     Ps = 4 4  -> Turn Off Margin Bell.\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\n   *     compile-time option).\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\n   *     (rxvt).\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\n   *     the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\n   *     Lock keys.  (This disables the numLock resource).\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\n   *     (This disables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\n   *     Delete key.\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\n   *     (This disables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\n   *     (This disables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\n   *     Control-G is received.  (This disables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\n   *     G is received.  (This disables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\n   *     first if in the Alternate Screen.  (This may be disabled by\n   *     the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\n   *     as in DECRC.  (This may be disabled by the titeInhibit\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\n   *     4 8  modes.  Use this with terminfo-based applications rather\n   *     than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\n   */\n  public resetMode(params: number[]): void {\n    if (params.length > 1) {\n      for (let i = 0; i < params.length; i++) {\n        this.resetMode([params[i]]);\n      }\n\n      return;\n    }\n\n    if (!this._terminal.prefix) {\n      switch (params[0]) {\n        case 4:\n          this._terminal.insertMode = false;\n          break;\n        case 20:\n          // this._terminal.convertEol = false;\n          break;\n      }\n    } else if (this._terminal.prefix === '?') {\n      switch (params[0]) {\n        case 1:\n          this._terminal.applicationCursor = false;\n          break;\n        case 3:\n          if (this._terminal.cols === 132 && this._terminal.savedCols) {\n            this._terminal.resize(this._terminal.savedCols, this._terminal.rows);\n          }\n          delete this._terminal.savedCols;\n          break;\n        case 6:\n          this._terminal.originMode = false;\n          break;\n        case 7:\n          this._terminal.wraparoundMode = false;\n          break;\n        case 12:\n          // this.cursorBlink = false;\n          break;\n        case 66:\n          this._terminal.log('Switching back to normal keypad.');\n          this._terminal.applicationKeypad = false;\n          this._terminal.viewport.syncScrollArea();\n          break;\n        case 9: // X10 Mouse\n        case 1000: // vt200 mouse\n        case 1002: // button event mouse\n        case 1003: // any event mouse\n          this._terminal.x10Mouse = false;\n          this._terminal.vt200Mouse = false;\n          this._terminal.normalMouse = false;\n          this._terminal.mouseEvents = false;\n          this._terminal.element.style.cursor = '';\n          break;\n        case 1004: // send focusin/focusout events\n          this._terminal.sendFocus = false;\n          break;\n        case 1005: // utf8 ext mode mouse\n          this._terminal.utfMouse = false;\n          break;\n        case 1006: // sgr ext mode mouse\n          this._terminal.sgrMouse = false;\n          break;\n        case 1015: // urxvt ext mode mouse\n          this._terminal.urxvtMouse = false;\n          break;\n        case 25: // hide cursor\n          this._terminal.cursorHidden = true;\n          break;\n        case 1049: // alt screen buffer cursor\n          ; // FALL-THROUGH\n        case 47: // normal screen buffer\n        case 1047: // normal screen buffer - clearing it first\n          if (this._terminal.normal) {\n            this._terminal.lines = this._terminal.normal.lines;\n            this._terminal.ybase = this._terminal.normal.ybase;\n            this._terminal.ydisp = this._terminal.normal.ydisp;\n            this._terminal.x = this._terminal.normal.x;\n            this._terminal.y = this._terminal.normal.y;\n            this._terminal.scrollTop = this._terminal.normal.scrollTop;\n            this._terminal.scrollBottom = this._terminal.normal.scrollBottom;\n            this._terminal.tabs = this._terminal.normal.tabs;\n            this._terminal.normal = null;\n            // if (params === 1049) {\n            //   this.x = this.savedX;\n            //   this.y = this.savedY;\n            // }\n            this._terminal.refresh(0, this._terminal.rows - 1);\n            this._terminal.viewport.syncScrollArea();\n            this._terminal.showCursor();\n          }\n          break;\n      }\n    }\n  }\n\n  /**\n   * CSI Pm m  Character Attributes (SGR).\n   *     Ps = 0  -> Normal (default).\n   *     Ps = 1  -> Bold.\n   *     Ps = 4  -> Underlined.\n   *     Ps = 5  -> Blink (appears as Bold).\n   *     Ps = 7  -> Inverse.\n   *     Ps = 8  -> Invisible, i.e., hidden (VT300).\n   *     Ps = 2 2  -> Normal (neither bold nor faint).\n   *     Ps = 2 4  -> Not underlined.\n   *     Ps = 2 5  -> Steady (not blinking).\n   *     Ps = 2 7  -> Positive (not inverse).\n   *     Ps = 2 8  -> Visible, i.e., not hidden (VT300).\n   *     Ps = 3 0  -> Set foreground color to Black.\n   *     Ps = 3 1  -> Set foreground color to Red.\n   *     Ps = 3 2  -> Set foreground color to Green.\n   *     Ps = 3 3  -> Set foreground color to Yellow.\n   *     Ps = 3 4  -> Set foreground color to Blue.\n   *     Ps = 3 5  -> Set foreground color to Magenta.\n   *     Ps = 3 6  -> Set foreground color to Cyan.\n   *     Ps = 3 7  -> Set foreground color to White.\n   *     Ps = 3 9  -> Set foreground color to default (original).\n   *     Ps = 4 0  -> Set background color to Black.\n   *     Ps = 4 1  -> Set background color to Red.\n   *     Ps = 4 2  -> Set background color to Green.\n   *     Ps = 4 3  -> Set background color to Yellow.\n   *     Ps = 4 4  -> Set background color to Blue.\n   *     Ps = 4 5  -> Set background color to Magenta.\n   *     Ps = 4 6  -> Set background color to Cyan.\n   *     Ps = 4 7  -> Set background color to White.\n   *     Ps = 4 9  -> Set background color to default (original).\n   *\n   *   If 16-color support is compiled, the following apply.  Assume\n   *   that xterm's resources are set so that the ISO color codes are\n   *   the first 8 of a set of 16.  Then the aixterm colors are the\n   *   bright versions of the ISO colors:\n   *     Ps = 9 0  -> Set foreground color to Black.\n   *     Ps = 9 1  -> Set foreground color to Red.\n   *     Ps = 9 2  -> Set foreground color to Green.\n   *     Ps = 9 3  -> Set foreground color to Yellow.\n   *     Ps = 9 4  -> Set foreground color to Blue.\n   *     Ps = 9 5  -> Set foreground color to Magenta.\n   *     Ps = 9 6  -> Set foreground color to Cyan.\n   *     Ps = 9 7  -> Set foreground color to White.\n   *     Ps = 1 0 0  -> Set background color to Black.\n   *     Ps = 1 0 1  -> Set background color to Red.\n   *     Ps = 1 0 2  -> Set background color to Green.\n   *     Ps = 1 0 3  -> Set background color to Yellow.\n   *     Ps = 1 0 4  -> Set background color to Blue.\n   *     Ps = 1 0 5  -> Set background color to Magenta.\n   *     Ps = 1 0 6  -> Set background color to Cyan.\n   *     Ps = 1 0 7  -> Set background color to White.\n   *\n   *   If xterm is compiled with the 16-color support disabled, it\n   *   supports the following, from rxvt:\n   *     Ps = 1 0 0  -> Set foreground and background color to\n   *     default.\n   *\n   *   If 88- or 256-color support is compiled, the following apply.\n   *     Ps = 3 8  ; 5  ; Ps -> Set foreground color to the second\n   *     Ps.\n   *     Ps = 4 8  ; 5  ; Ps -> Set background color to the second\n   *     Ps.\n   */\n  public charAttributes(params: number[]): void {\n    // Optimize a single SGR0.\n    if (params.length === 1 && params[0] === 0) {\n      this._terminal.curAttr = this._terminal.defAttr;\n      return;\n    }\n\n    let l = params.length\n    , i = 0\n    , flags = this._terminal.curAttr >> 18\n    , fg = (this._terminal.curAttr >> 9) & 0x1ff\n    , bg = this._terminal.curAttr & 0x1ff\n    , p;\n\n    for (; i < l; i++) {\n      p = params[i];\n      if (p >= 30 && p <= 37) {\n        // fg color 8\n        fg = p - 30;\n      } else if (p >= 40 && p <= 47) {\n        // bg color 8\n        bg = p - 40;\n      } else if (p >= 90 && p <= 97) {\n        // fg color 16\n        p += 8;\n        fg = p - 90;\n      } else if (p >= 100 && p <= 107) {\n        // bg color 16\n        p += 8;\n        bg = p - 100;\n      } else if (p === 0) {\n        // default\n        flags = this._terminal.defAttr >> 18;\n        fg = (this._terminal.defAttr >> 9) & 0x1ff;\n        bg = this._terminal.defAttr & 0x1ff;\n        // flags = 0;\n        // fg = 0x1ff;\n        // bg = 0x1ff;\n      } else if (p === 1) {\n        // bold text\n        flags |= 1;\n      } else if (p === 4) {\n        // underlined text\n        flags |= 2;\n      } else if (p === 5) {\n        // blink\n        flags |= 4;\n      } else if (p === 7) {\n        // inverse and positive\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\n        flags |= 8;\n      } else if (p === 8) {\n        // invisible\n        flags |= 16;\n      } else if (p === 22) {\n        // not bold\n        flags &= ~1;\n      } else if (p === 24) {\n        // not underlined\n        flags &= ~2;\n      } else if (p === 25) {\n        // not blink\n        flags &= ~4;\n      } else if (p === 27) {\n        // not inverse\n        flags &= ~8;\n      } else if (p === 28) {\n        // not invisible\n        flags &= ~16;\n      } else if (p === 39) {\n        // reset fg\n        fg = (this._terminal.defAttr >> 9) & 0x1ff;\n      } else if (p === 49) {\n        // reset bg\n        bg = this._terminal.defAttr & 0x1ff;\n      } else if (p === 38) {\n        // fg color 256\n        if (params[i + 1] === 2) {\n          i += 2;\n          fg = this._terminal.matchColor(\n            params[i] & 0xff,\n            params[i + 1] & 0xff,\n            params[i + 2] & 0xff);\n          if (fg === -1) fg = 0x1ff;\n          i += 2;\n        } else if (params[i + 1] === 5) {\n          i += 2;\n          p = params[i] & 0xff;\n          fg = p;\n        }\n      } else if (p === 48) {\n        // bg color 256\n        if (params[i + 1] === 2) {\n          i += 2;\n          bg = this._terminal.matchColor(\n            params[i] & 0xff,\n            params[i + 1] & 0xff,\n            params[i + 2] & 0xff);\n          if (bg === -1) bg = 0x1ff;\n          i += 2;\n        } else if (params[i + 1] === 5) {\n          i += 2;\n          p = params[i] & 0xff;\n          bg = p;\n        }\n      } else if (p === 100) {\n        // reset fg/bg\n        fg = (this._terminal.defAttr >> 9) & 0x1ff;\n        bg = this._terminal.defAttr & 0x1ff;\n      } else {\n        this._terminal.error('Unknown SGR attribute: %d.', p);\n      }\n    }\n\n    this._terminal.curAttr = (flags << 18) | (fg << 9) | bg;\n  }\n\n  /**\n   * CSI Ps n  Device Status Report (DSR).\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\n   *   CSI 0 n\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n   *   Result is\n   *   CSI r ; c R\n   * CSI ? Ps n\n   *   Device Status Report (DSR, DEC-specific).\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n   *     ? r ; c R (assumes page is zero).\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n   *     or CSI ? 1 1  n  (not ready).\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n   *     or CSI ? 2 1  n  (locked).\n   *     Ps = 2 6  -> Report Keyboard status as\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n   *   The last two parameters apply to VT400 & up, and denote key-\n   *   board ready and LK01 respectively.\n   *     Ps = 5 3  -> Report Locator status as\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\n   *   CSI ? 5 0  n  No Locator, if not.\n   */\n  public deviceStatus(params: number[]): void {\n    if (!this._terminal.prefix) {\n      switch (params[0]) {\n        case 5:\n          // status report\n          this._terminal.send(C0.ESC + '[0n');\n          break;\n        case 6:\n          // cursor position\n          this._terminal.send(C0.ESC + '['\n                    + (this._terminal.y + 1)\n                    + ';'\n                    + (this._terminal.x + 1)\n                    + 'R');\n          break;\n      }\n    } else if (this._terminal.prefix === '?') {\n      // modern xterm doesnt seem to\n      // respond to any of these except ?6, 6, and 5\n      switch (params[0]) {\n        case 6:\n          // cursor position\n          this._terminal.send(C0.ESC + '[?'\n                    + (this._terminal.y + 1)\n                    + ';'\n                    + (this._terminal.x + 1)\n                    + 'R');\n          break;\n        case 15:\n          // no printer\n          // this.send(C0.ESC + '[?11n');\n          break;\n        case 25:\n          // dont support user defined keys\n          // this.send(C0.ESC + '[?21n');\n          break;\n        case 26:\n          // north american keyboard\n          // this.send(C0.ESC + '[?27;1;0;0n');\n          break;\n        case 53:\n          // no dec locator/mouse\n          // this.send(C0.ESC + '[?50n');\n          break;\n      }\n    }\n  }\n\n  /**\n   * CSI ! p   Soft terminal reset (DECSTR).\n   * http://vt100.net/docs/vt220-rm/table4-10.html\n   */\n  public softReset(params: number[]): void {\n    this._terminal.cursorHidden = false;\n    this._terminal.insertMode = false;\n    this._terminal.originMode = false;\n    this._terminal.wraparoundMode = true;  // defaults: xterm - true, vt100 - false\n    this._terminal.applicationKeypad = false; // ?\n    this._terminal.viewport.syncScrollArea();\n    this._terminal.applicationCursor = false;\n    this._terminal.scrollTop = 0;\n    this._terminal.scrollBottom = this._terminal.rows - 1;\n    this._terminal.curAttr = this._terminal.defAttr;\n    this._terminal.x = this._terminal.y = 0; // ?\n    this._terminal.charset = null;\n    this._terminal.glevel = 0; // ??\n    this._terminal.charsets = [null]; // ??\n  }\n\n  /**\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\n   *   Ps = 0  -> blinking block.\n   *   Ps = 1  -> blinking block (default).\n   *   Ps = 2  -> steady block.\n   *   Ps = 3  -> blinking underline.\n   *   Ps = 4  -> steady underline.\n   *   Ps = 5  -> blinking bar (xterm).\n   *   Ps = 6  -> steady bar (xterm).\n   */\n  public setCursorStyle(params?: number[]): void {\n    const param = params[0] < 1 ? 1 : params[0];\n    switch (param) {\n      case 1:\n      case 2:\n        this._terminal.setOption('cursorStyle', 'block');\n        break;\n      case 3:\n      case 4:\n        this._terminal.setOption('cursorStyle', 'underline');\n        break;\n      case 5:\n      case 6:\n        this._terminal.setOption('cursorStyle', 'bar');\n        break;\n    }\n    const isBlinking = param % 2 === 1;\n    this._terminal.setOption('cursorBlink', isBlinking);\n  }\n\n  /**\n   * CSI Ps ; Ps r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\n   *   dow) (DECSTBM).\n   * CSI ? Pm r\n   */\n  public setScrollRegion(params: number[]): void {\n    if (this._terminal.prefix) return;\n    this._terminal.scrollTop = (params[0] || 1) - 1;\n    this._terminal.scrollBottom = (params[1] && params[1] <= this._terminal.rows ? params[1] : this._terminal.rows) - 1;\n    this._terminal.x = 0;\n    this._terminal.y = 0;\n  }\n\n\n  /**\n   * CSI s\n   *   Save cursor (ANSI.SYS).\n   */\n  public saveCursor(params: number[]): void {\n    this._terminal.savedX = this._terminal.x;\n    this._terminal.savedY = this._terminal.y;\n  }\n\n\n  /**\n   * CSI u\n   *   Restore cursor (ANSI.SYS).\n   */\n  public restoreCursor(params: number[]): void {\n    this._terminal.x = this._terminal.savedX || 0;\n    this._terminal.y = this._terminal.savedY || 0;\n  }\n}\n\nconst wcwidth = (function(opts) {\n  // extracted from https://www.cl.cam.ac.uk/%7Emgk25/ucs/wcwidth.c\n  // combining characters\n  const COMBINING = [\n    [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n    [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n    [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n    [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n    [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n    [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n    [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n    [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n    [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n    [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n    [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n    [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n    [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n    [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n    [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n    [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n    [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n    [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n    [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n    [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n    [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n    [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n    [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n    [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n    [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n    [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n    [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n    [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n    [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n    [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n    [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n    [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n    [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n    [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n    [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n    [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n    [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n    [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n    [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n    [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n    [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n    [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n    [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB],\n    [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n    [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n    [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n    [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n    [0xE0100, 0xE01EF]\n  ];\n  // binary search\n  function bisearch(ucs) {\n    let min = 0;\n    let max = COMBINING.length - 1;\n    let mid;\n    if (ucs < COMBINING[0][0] || ucs > COMBINING[max][1])\n      return false;\n    while (max >= min) {\n      mid = Math.floor((min + max) / 2);\n      if (ucs > COMBINING[mid][1])\n        min = mid + 1;\n      else if (ucs < COMBINING[mid][0])\n        max = mid - 1;\n      else\n        return true;\n    }\n    return false;\n  }\n  function wcwidth(ucs) {\n    // test for 8-bit control characters\n    if (ucs === 0)\n      return opts.nul;\n    if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0))\n      return opts.control;\n    // binary search in table of non-spacing characters\n    if (bisearch(ucs))\n      return 0;\n    // if we arrive here, ucs is not a combining or C0/C1 control character\n    if (isWide(ucs)) {\n      return 2;\n    }\n    return 1;\n  }\n  function isWide(ucs) {\n    return (\n      ucs >= 0x1100 && (\n        ucs <= 0x115f ||                // Hangul Jamo init. consonants\n        ucs === 0x2329 ||\n        ucs === 0x232a ||\n        (ucs >= 0x2e80 && ucs <= 0xa4cf && ucs !== 0x303f) ||  // CJK..Yi\n        (ucs >= 0xac00 && ucs <= 0xd7a3) ||    // Hangul Syllables\n        (ucs >= 0xf900 && ucs <= 0xfaff) ||    // CJK Compat Ideographs\n        (ucs >= 0xfe10 && ucs <= 0xfe19) ||    // Vertical forms\n        (ucs >= 0xfe30 && ucs <= 0xfe6f) ||    // CJK Compat Forms\n        (ucs >= 0xff00 && ucs <= 0xff60) ||    // Fullwidth Forms\n        (ucs >= 0xffe0 && ucs <= 0xffe6) ||\n        (ucs >= 0x20000 && ucs <= 0x2fffd) ||\n        (ucs >= 0x30000 && ucs <= 0x3fffd)));\n  }\n  return wcwidth;\n})({nul: 0, control: 0});  // configurable options\n","/**\n * @license MIT\n */\n\ninterface ListenerType {\n    (): void;\n    listener?: () => void;\n};\n\nexport class EventEmitter {\n  private _events: {[type: string]: ListenerType[]};\n\n  constructor() {\n    // Restore the previous events if available, this will happen if the\n    // constructor is called multiple times on the same object (terminal reset).\n    this._events = this._events || {};\n  }\n\n  public on(type, listener): void {\n    this._events[type] = this._events[type] || [];\n    this._events[type].push(listener);\n  }\n\n  public off(type, listener): void {\n    if (!this._events[type]) {\n      return;\n    }\n\n    let obj = this._events[type];\n    let i = obj.length;\n\n    while (i--) {\n      if (obj[i] === listener || obj[i].listener === listener) {\n        obj.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public removeAllListeners(type): void {\n    if (this._events[type]) {\n       delete this._events[type];\n    }\n  }\n\n  public once(type, listener): any {\n    function on() {\n      let args = Array.prototype.slice.call(arguments);\n      this.off(type, on);\n      return listener.apply(this, args);\n    }\n    (<any>on).listener = listener;\n    return this.on(type, on);\n  }\n\n  public emit(type): void {\n    if (!this._events[type]) {\n      return;\n    }\n\n    let args = Array.prototype.slice.call(arguments, 1);\n    let obj = this._events[type];\n\n    for (let i = 0; i < obj.length; i++) {\n      obj[i].apply(this, args);\n    }\n  }\n\n  public listeners(type): ListenerType[] {\n    return this._events[type] || [];\n  }\n}\n","/**\n * @license MIT\n */\n\n/**\n * C0 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C0 {\n  /** Null (Caret = ^@, C = \\0) */\n  export const NUL = '\\x00';\n  /** Start of Heading (Caret = ^A) */\n  export const SOH = '\\x01';\n  /** Start of Text (Caret = ^B) */\n  export const STX = '\\x02';\n  /** End of Text (Caret = ^C) */\n  export const ETX = '\\x03';\n  /** End of Transmission (Caret = ^D) */\n  export const EOT = '\\x04';\n  /** Enquiry (Caret = ^E) */\n  export const ENQ = '\\x05';\n  /** Acknowledge (Caret = ^F) */\n  export const ACK = '\\x06';\n  /** Bell (Caret = ^G, C = \\a) */\n  export const BEL = '\\x07';\n  /** Backspace (Caret = ^H, C = \\b) */\n  export const BS  = '\\x08';\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\n  export const HT  = '\\x09';\n  /** Line Feed (Caret = ^J, C = \\n) */\n  export const LF  = '\\x0a';\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\n  export const VT  = '\\x0b';\n  /** Form Feed (Caret = ^L, C = \\f) */\n  export const FF  = '\\x0c';\n  /** Carriage Return (Caret = ^M, C = \\r) */\n  export const CR  = '\\x0d';\n  /** Shift Out (Caret = ^N) */\n  export const SO  = '\\x0e';\n  /** Shift In (Caret = ^O) */\n  export const SI  = '\\x0f';\n  /** Data Link Escape (Caret = ^P) */\n  export const DLE = '\\x10';\n  /** Device Control One (XON) (Caret = ^Q) */\n  export const DC1 = '\\x11';\n  /** Device Control Two (Caret = ^R) */\n  export const DC2 = '\\x12';\n  /** Device Control Three (XOFF) (Caret = ^S) */\n  export const DC3 = '\\x13';\n  /** Device Control Four (Caret = ^T) */\n  export const DC4 = '\\x14';\n  /** Negative Acknowledge (Caret = ^U) */\n  export const NAK = '\\x15';\n  /** Synchronous Idle (Caret = ^V) */\n  export const SYN = '\\x16';\n  /** End of Transmission Block (Caret = ^W) */\n  export const ETB = '\\x17';\n  /** Cancel (Caret = ^X) */\n  export const CAN = '\\x18';\n  /** End of Medium (Caret = ^Y) */\n  export const EM  = '\\x19';\n  /** Substitute (Caret = ^Z) */\n  export const SUB = '\\x1a';\n  /** Escape (Caret = ^[, C = \\e) */\n  export const ESC = '\\x1b';\n  /** File Separator (Caret = ^\\) */\n  export const FS  = '\\x1c';\n  /** Group Separator (Caret = ^]) */\n  export const GS  = '\\x1d';\n  /** Record Separator (Caret = ^^) */\n  export const RS  = '\\x1e';\n  /** Unit Separator (Caret = ^_) */\n  export const US  = '\\x1f';\n  /** Space */\n  export const SP  = '\\x20';\n  /** Delete (Caret = ^?) */\n  export const DEL = '\\x7f';\n};\n","/**\n * @license MIT\n */\n\nimport { ITerminal } from './Interfaces';\n\ninterface IPosition {\n  start: number;\n  end: number;\n}\n\n/**\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\n * events, displaying the in-progress composition to the UI and forwarding the final composition\n * to the handler.\n */\nexport class CompositionHelper {\n  /**\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\n   */\n  private isComposing: boolean;\n\n  /**\n   * The position within the input textarea's value of the current composition.\n   */\n  private compositionPosition: IPosition;\n\n  /**\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\n   * in-progress composition.\n   */\n  private isSendingComposition: boolean;\n\n  /**\n   * Creates a new CompositionHelper.\n   * @param textarea The textarea that xterm uses for input.\n   * @param compositionView The element to display the in-progress composition in.\n   * @param terminal The Terminal to forward the finished composition to.\n   */\n  constructor(\n    private textarea: HTMLTextAreaElement,\n    private compositionView: HTMLElement,\n    private terminal: ITerminal\n  ) {\n    this.isComposing = false;\n    this.isSendingComposition = false;\n    this.compositionPosition = { start: null, end: null };\n  }\n\n  /**\n   * Handles the compositionstart event, activating the composition view.\n   */\n  public compositionstart() {\n    this.isComposing = true;\n    this.compositionPosition.start = this.textarea.value.length;\n    this.compositionView.textContent = '';\n    this.compositionView.classList.add('active');\n  }\n\n  /**\n   * Handles the compositionupdate event, updating the composition view.\n   * @param {CompositionEvent} ev The event.\n   */\n  public compositionupdate(ev: CompositionEvent) {\n    this.compositionView.textContent = ev.data;\n    this.updateCompositionElements();\n    setTimeout(() => {\n      this.compositionPosition.end = this.textarea.value.length;\n    }, 0);\n  }\n\n  /**\n   * Handles the compositionend event, hiding the composition view and sending the composition to\n   * the handler.\n   */\n  public compositionend() {\n    this.finalizeComposition(true);\n  }\n\n  /**\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\n   * @param ev The keydown event.\n   * @return Whether the Terminal should continue processing the keydown event.\n   */\n  public keydown(ev: KeyboardEvent) {\n    if (this.isComposing || this.isSendingComposition) {\n      if (ev.keyCode === 229) {\n        // Continue composing if the keyCode is the \"composition character\"\n        return false;\n      } else if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n        // Continue composing if the keyCode is a modifier key\n        return false;\n      } else {\n        // Finish composition immediately. This is mainly here for the case where enter is\n        // pressed and the handler needs to be triggered before the command is executed.\n        this.finalizeComposition(false);\n      }\n    }\n\n    if (ev.keyCode === 229) {\n      // If the \"composition character\" is used but gets to this point it means a non-composition\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\n      this.handleAnyTextareaChanges();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\n   * is ending.\n   * @param waitForPropogation Whether to wait for events to propogate before sending\n   *   the input. This should be false if a non-composition keystroke is entered before the\n   *   compositionend event is triggered, such as enter, so that the composition is send before\n   *   the command is executed.\n   */\n  private finalizeComposition(waitForPropogation: boolean) {\n    this.compositionView.classList.remove('active');\n    this.isComposing = false;\n    this.clearTextareaPosition();\n\n    if (!waitForPropogation) {\n      // Cancel any delayed composition send requests and send the input immediately.\n      this.isSendingComposition = false;\n      const input = this.textarea.value.substring(this.compositionPosition.start, this.compositionPosition.end);\n      this.terminal.handler(input);\n    } else {\n      // Make a deep copy of the composition position here as a new compositionstart event may\n      // fire before the setTimeout executes.\n      const currentCompositionPosition = {\n        start: this.compositionPosition.start,\n        end: this.compositionPosition.end,\n      };\n\n      // Since composition* events happen before the changes take place in the textarea on most\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\n      // complete. This ensures the correct character is retrieved, this solution was used\n      // because:\n      // - The compositionend event's data property is unreliable, at least on Chromium\n      // - The last compositionupdate event's data property does not always accurately describe\n      //   the character, a counter example being Korean where an ending consonsant can move to\n      //   the following character if the following input is a vowel.\n      this.isSendingComposition = true;\n      setTimeout(() => {\n        // Ensure that the input has not already been sent\n        if (this.isSendingComposition) {\n          this.isSendingComposition = false;\n          let input;\n          if (this.isComposing) {\n            // Use the end position to get the string if a new composition has started.\n            input = this.textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\n          } else {\n            // Don't use the end position here in order to pick up any characters after the\n            // composition has finished, for example when typing a non-composition character\n            // (eg. 2) after a composition character.\n            input = this.textarea.value.substring(currentCompositionPosition.start);\n          }\n          this.terminal.handler(input);\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\n   * This should be called when not currently composing but a keydown event with the \"composition\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\n   * IME is active.\n   */\n  private handleAnyTextareaChanges() {\n    const oldValue = this.textarea.value;\n    setTimeout(() => {\n      // Ignore if a composition has started since the timeout\n      if (!this.isComposing) {\n        const newValue = this.textarea.value;\n        const diff = newValue.replace(oldValue, '');\n        if (diff.length > 0) {\n          this.terminal.handler(diff);\n        }\n      }\n    }, 0);\n  }\n\n  /**\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\n   * IME helper dialog is positioned correctly).\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\n   *   necessary as the IME events across browsers are not consistently triggered.\n   */\n  public updateCompositionElements(dontRecurse?: boolean) {\n    if (!this.isComposing) {\n      return;\n    }\n    const cursor = <HTMLElement>this.terminal.element.querySelector('.terminal-cursor');\n    if (cursor) {\n      // Take .xterm-rows offsetTop into account as well in case it's positioned absolutely within\n      // the .xterm element.\n      const xtermRows = <HTMLElement>this.terminal.element.querySelector('.xterm-rows');\n      const cursorTop = xtermRows.offsetTop + cursor.offsetTop;\n\n      this.compositionView.style.left = cursor.offsetLeft + 'px';\n      this.compositionView.style.top = cursorTop + 'px';\n      this.compositionView.style.height = cursor.offsetHeight + 'px';\n      this.compositionView.style.lineHeight = cursor.offsetHeight + 'px';\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\n      // text is.\n      const compositionViewBounds = this.compositionView.getBoundingClientRect();\n      this.textarea.style.left = cursor.offsetLeft + 'px';\n      this.textarea.style.top = cursorTop + 'px';\n      this.textarea.style.width = compositionViewBounds.width + 'px';\n      this.textarea.style.height = compositionViewBounds.height + 'px';\n      this.textarea.style.lineHeight = compositionViewBounds.height + 'px';\n    }\n    if (!dontRecurse) {\n      setTimeout(() => this.updateCompositionElements(true), 0);\n    }\n  };\n\n  /**\n   * Clears the textarea's position so that the cursor does not blink on IE.\n   * @private\n   */\n  private clearTextareaPosition() {\n    this.textarea.style.left = '';\n    this.textarea.style.top = '';\n  };\n}\n","/**\n * @license MIT\n */\n\n/**\n * The character sets supported by the terminal. These enable several languages\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\n * for a discussion on character sets. Only VT100 character sets are supported.\n */\nexport const CHARSETS: {[key: string]: {[key: string]: string}} = {};\n\n/**\n * The default character set, US.\n */\nexport const DEFAULT_CHARSET = CHARSETS['B'];\n\n/**\n * DEC Special Character and Line Drawing Set.\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\n * A lot of curses apps use this if they see TERM=xterm.\n * testing: echo -e '\\e(0a\\e(B'\n * The xterm output sometimes seems to conflict with the\n * reference above. xterm seems in line with the reference\n * when running vttest however.\n * The table below now uses xterm's output from vttest.\n */\nCHARSETS['0'] = {\n  '`': '\\u25c6', // '◆'\n  'a': '\\u2592', // '▒'\n  'b': '\\u0009', // '\\t'\n  'c': '\\u000c', // '\\f'\n  'd': '\\u000d', // '\\r'\n  'e': '\\u000a', // '\\n'\n  'f': '\\u00b0', // '°'\n  'g': '\\u00b1', // '±'\n  'h': '\\u2424', // '\\u2424' (NL)\n  'i': '\\u000b', // '\\v'\n  'j': '\\u2518', // '┘'\n  'k': '\\u2510', // '┐'\n  'l': '\\u250c', // '┌'\n  'm': '\\u2514', // '└'\n  'n': '\\u253c', // '┼'\n  'o': '\\u23ba', // '⎺'\n  'p': '\\u23bb', // '⎻'\n  'q': '\\u2500', // '─'\n  'r': '\\u23bc', // '⎼'\n  's': '\\u23bd', // '⎽'\n  't': '\\u251c', // '├'\n  'u': '\\u2524', // '┤'\n  'v': '\\u2534', // '┴'\n  'w': '\\u252c', // '┬'\n  'x': '\\u2502', // '│'\n  'y': '\\u2264', // '≤'\n  'z': '\\u2265', // '≥'\n  '{': '\\u03c0', // 'π'\n  '|': '\\u2260', // '≠'\n  '}': '\\u00a3', // '£'\n  '~': '\\u00b7'  // '·'\n};\n\n/**\n * British character set\n * ESC (A\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\n */\nCHARSETS['A'] = {\n  '#': '£'\n};\n\n/**\n * United States character set\n * ESC (B\n */\nCHARSETS['B'] = null;\n\n/**\n * Dutch character set\n * ESC (4\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\n */\nCHARSETS['4'] = {\n  '#': '£',\n  '@': '¾',\n  '[': 'ij',\n  '\\\\': '½',\n  ']': '|',\n  '{': '¨',\n  '|': 'f',\n  '}': '¼',\n  '~': '´'\n};\n\n/**\n * Finnish character set\n * ESC (C or ESC (5\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\n */\nCHARSETS['C'] =\nCHARSETS['5'] = {\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * French character set\n * ESC (R\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\n */\nCHARSETS['R'] = {\n  '#': '£',\n  '@': 'à',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': '§',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': '¨'\n};\n\n/**\n * French Canadian character set\n * ESC (Q\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\n */\nCHARSETS['Q'] = {\n  '@': 'à',\n  '[': 'â',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  '`': 'ô',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': 'û'\n};\n\n/**\n * German character set\n * ESC (K\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\n */\nCHARSETS['K'] = {\n  '@': '§',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Ü',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'ß'\n};\n\n/**\n * Italian character set\n * ESC (Y\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\n */\nCHARSETS['Y'] = {\n  '#': '£',\n  '@': '§',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': 'é',\n  '`': 'ù',\n  '{': 'à',\n  '|': 'ò',\n  '}': 'è',\n  '~': 'ì'\n};\n\n/**\n * Norwegian/Danish character set\n * ESC (E or ESC (6\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\n */\nCHARSETS['E'] =\nCHARSETS['6'] = {\n  '@': 'Ä',\n  '[': 'Æ',\n  '\\\\': 'Ø',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'ä',\n  '{': 'æ',\n  '|': 'ø',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Spanish character set\n * ESC (Z\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\n */\nCHARSETS['Z'] = {\n  '#': '£',\n  '@': '§',\n  '[': '¡',\n  '\\\\': 'Ñ',\n  ']': '¿',\n  '{': '°',\n  '|': 'ñ',\n  '}': 'ç'\n};\n\n/**\n * Swedish character set\n * ESC (H or ESC (7\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\n */\nCHARSETS['H'] =\nCHARSETS['7'] = {\n  '@': 'É',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Swiss character set\n * ESC (=\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\n */\nCHARSETS['='] = {\n  '#': 'ù',\n  '@': 'à',\n  '[': 'é',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  '_': 'è',\n  '`': 'ô',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'û'\n};\n",null],"names":[],"mappings":"AeAA;;;ADSa;AAKA;AAYbwpNa;;;;;;;ADRb;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAAC;;;;;;;ADtEA;AAED;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AA9Da;;;;;;;ADJb;AACA;AASA;AAEA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAOA;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAauCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAwFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkyBA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAv7Ca;AAy7Cb;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ADxiDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAeA;AAFA;AAGA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AAOA;AACA;AACA;AAYA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAlTmB;AANN;;;;;;;ADhCb;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAKA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAKA;AACA;AAIA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAIA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAMA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAQA;AACA;AACA;AAQA;AACA;AACA;AAOA;AACA;AACA;AAKA;AACA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AACA;AASA;AAAA;AArda;;;;;;;AD3Jb;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAC;AAED;AAEA;AAMA;AAAA;AAJA;AACA;AACA;AAKA;AACA;AACA;AAKA;AAQA;AACA;AACA;AACA;AACA;AACA;AAMA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAutQa;AA2Qb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ADtSA;AAYA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AA/Ga;;;;;;;ADcb;AACA;AAMA;AAEA;AACA;AAEA;AACA;AAbA;AAmBA;AAGA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAbA;AAoBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAqCA;AACA;AAMA;AACA;AAGA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;;;;;;;AD/FA;AAEA;AACA;AACA;AAEa;AACA;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ADhBb;AAKA;AAAA;AAOA;AAAA;AAEA;AACA;;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnDa;;;;;;;ADJb;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAXA;AAahLa;;;;;;;ADKb;AACA;AACA;AAFA;AAEC;;;;;;;ADDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AAOA;AAMA;AAOA;AAkBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AAIA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAKA;AAKA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAQA;AAGA;AAGA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAKA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAIA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAIA;AAOA;AACA;AAQA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAYA;AACA;AAKA;AACA;AAIA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAAA;AAIA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAGA;AAGA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAQA;AACA;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAMA;AACA;AAKA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAUA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAMA;AACA;AAAA;AACA;AAAA;AAOA;AAKA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAOA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAQA;AACA;AACA;AAEA;;;"}